const { ethers } = require("hardhat");
const { utils, BigNumber } = require("ethers");
const hre = require("hardhat");

// Constants
const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay));
const convert = (amount, decimals) => ethers.utils.parseUnits(amount, decimals);
const divDec = (amount, decimals = 18) => amount / 10 ** decimals;
const one = convert("1", 18);

const MARKET_RESERVES = "5000000"; // 5,000,000 TOKEN in market reserves

const BASE_ADDRESS = "0xFCBD14DC51f0A4d49d5E53C2E0950e0bC26d0Dce"; // HONEY address
const MULTISIG = "0xaB53AfB5C63E2552e7bD986c0a38E8a8dC58E09C"; // Multisig Address
const VAULT_FACTORY = "0x94Ad6Ac84f6C6FbA8b8CCbD71d9f4f101def52a8"; // Vault Factory Address
const BUILDER_ADDRESS = "0xDeb7d9B443a3ab779DFe9Ff2Aa855b1eA5fD318e";

const HONEY = "0xFCBD14DC51f0A4d49d5E53C2E0950e0bC26d0Dce";
const WBERA = "0x6969696969696969696969696969696969696969";
const WETH = "0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590";
const WBTC = "0x0555E30da8f98308EdB960aa94C0Db47230d2B9c";
const USDCe = "0x549943e04f40284185054145c6E4e9568C1D3241";
const BYUSD = "0x688e72142674041f8f6Af4c808a4045cA1D6aC82";
const YEET = "0x08A38Caa631DE329FF2DAD1656CE789F31AF3142";
const IBGT = "0xac03CABA51e17c86c921E1f6CBFBdC91F8BB2E6b";
const OHM = "0x18878Df23e2a36f81e820e4b47b4A40576D3159C";
const XKDK = "0xe8D7b965BA082835EA917F2B173Ff3E035B69eeB";
const PLUG = "0x231A6BD8eB88Cfa42776B7Ac575CeCAf82bf1E21";
const BRLY = "0xaB7e0f3D69DE8061aa46D7C9964DbC11878468eB";
const rUSD = "0x09D4214C03D01F49544C0448DBE3A27f768F2b34";
const rUSDOT = "0x4A8B5283E053A8B118EaDc4981e8Ec8659995652";
const PRG = "0xbf2E152f460090aCE91A456e3deE5ACf703f27aD";
const BERAMO = "0x1F7210257FA157227D09449229a9266b0D581337";
const LBGT = "0xBaadCC2962417C01Af99fb2B7C75706B9bd6Babe";
const RAMEN = "0xb8B1Af593Dc37B33a2c87C8Db1c9051FC32858B7";
const BITCOIN = "0x6B26f778bfae56CFb4Bf9b62c678d9D40e725227";
const NECT = "0x1ce0a25d13ce4d52071ae7e02cf1f6606f4c79d3";
const WGBERA = "0xd77552d3849ab4d8c3b189a9582d0ba4c1f4f912";
const LOCKS = "0xb7E448E5677D212B8C8Da7D6312E8Afc49800466";
const BREAD = "0x0003eEDFdd020bf60D10cf684ABAc7C4534B7eAd";
const HENLO = "0xb2F776e9c1C926C4b2e54182Fac058dA9Af0B6A5";
const HENLOCKED100M = "0x7Bdf98DdeEd209cFa26bD2352b470Ac8b5485EC5";
const HENLOCKED330M = "0x37DD8850919EBdCA911C383211a70839A94b0539";
const HENLOCKED420M = "0xF07Fa3ECE9741D408d643748Ff85710BEdEF25bA";
const HENLOCKED690M = "0x8AB854dC0672d7A13A85399A56CB628FB22102d6";
const HENLOCKED1B = "0xF0edfc3e122DB34773293E0E5b2C3A58492E7338";
const brWETH = "0xDDCa6328c88e30aBB02436A9Cc1A4e229Cad44aC";
const brWBTC = "0x335128d629a1247495087613e2ee7c2f1b3eb4c4";
const briBGT = "0x02b4c0B62d71d975Fb36684668175AFAe19952D5";
const brHENLO = "0xf7Ae4586563880323A077eb3A5dBefC79725f934";
const briBERA = "0x3062cA8A7c8252779555bDd96EF91307CE057EbC";
const brBREAD = "0xe4E1da04450Df39C2C484D7274F880BFa6b734C7";
const br3BC = "0x35D6A3AdaD19c81db864C807160C73A2B3Cb3E35";
const brNAV = "0x1199FD867D6F664A3E6FdA7b5299F25D194b6AA8";
const brRAMEN = "0xA6d5d42E65Cd77AE2Fa03D62E1C3c61346976448";
const brwgBERA = "0xe54BA5e87A2d9ee028E9c9448DD57aE72BDc7064";
const brberaETH = "0xd70DbC661237851cB115e2cd89Fe1150B66AE9C4";
const brYEET = "0x76d70D7Be520842bfEF0C6C8F23f60BD1a4640E5";
const stLBGT = "0xFace73a169e2CA2934036C8Af9f464b5De9eF0ca";
const PPAW = "0x03c86e21623f25Eca0eA544890c7603B9a33E1AC";
const POLLEN = "0xC99e948E9D183848a6c4F5E6C1d225F02f171d79";
const brUSDbr = "0xA77b7B69749eAdB00114AFb21c771453503A88FA";
const brBERATARDIO = "0xF877EEb2f1f7ff84179242Ab16f532Cfc53fFBb5";
const aSUGAR = "0x804CF700De1e18f2411Bd05aad5fa10d60e1900f";
const brHENLO2 = "0xb9439eA93CdaE05e8a25B08807b1fb32f6F14A0c";
const brBM = "0xac72954B71De33EE00cE40A5e2d8C4145969F131";
const brNECT = "0xf7B379C4F0589e1FE49bbbF031F5dcBDA922BC31";
const brsUSDe = "0x684ac159adbc1dB3e3106E5601294d40F4bcD2FB";
const brOHM = "0xaaced9bC5f4B054a9b23f3DA0Cc90232178EeedB";
const brWBTC2 = "0xf18221661DB5d181f4375cc06eE302ffcB061142";
const oriBGT = "0x69f1E971257419B1E9C405A553f252c64A29A30a";
const oriBGTOT = "0x978448A7866Aed0146Ad5C5E5d3d8424e2b16356";
const BRR = "0x885a71E726Fe7828d84B876e42C48F97990a5c9d";
const ARBERAPOINTS = "0xa1550fc407808b5C3F3B9bF1c4d9c5AEb5f23681";
const OOGA = "0x009af46Df68DB0E76BFe9EA35663f6Ed17877956";
const BR = "0xd352dc6e5F0c45E2F2b38eb5565EB286A1ea4087";
const vsbruniBTC = "0x32c4F33DEB27a8c675DCF72Fd0eF15974a1D3363";
const vsbrarBERO = "0xb760360192BE48134eBad255dEC96B05f73B6502";
const vsbrLBGT = "0x50ec0D051Cd3C067B90d2CE5016682b98252f662";
const vsbrOOGA = "0xF1354deC077c5e14eDED6a56f98476AB7Ecea7e8";
const MEAD = "0xEDB5180661F56077292C92Ab40B1AC57A279a396";
const brOOGA = "0x128F9d072E14d499F664285735252bB3b94Eb010";
const brLBGT = "0x883899D0111d69f85Fdfd19e4B89E613F231B781";
const brarBERO = "0x0c1f965eb5221b8daca960dac1ccfda5a97b7dd7";
const bruniBTC = "0xBAc6acaDc524520A1d98c1e0e384E9cDf98185c0";
const fBOMB = "0xdf486980df72446a5eff76263efb2fa9391be136";
const xfatBERA = "0xcAc89B3F94eD6BAb04113884deeE2A55293c2DD7";
const canaNECT = "0x439c84851bb1EDd8Db3DD94809ebBEA6670682F3";
const brPOLLEN = "0xa9f9fc404378686275Ae053EC73c21c43fa2D7b5";

// Beradrom Plugin Factory
const BERADROME_PLUGIN_FACTORY = "0xf0b0f738Fed0656D66725bb1528B42050de64DCa";

// Beradrome Kodiak PLUG-WBERA-V2
// get from
const BERADROME_TOKEN_0 = "0xac1D44f0284634EB04FFA56C76d47e839224b46F";
const BERADROME_TOKENS_0 = [PLUG, WBERA];
const BERADROME_REWARDS_0 = [PLUG];
const BERADROME_SYMBOL_0 = "Kodiak PLUG-WBERA-V2";
const BERADROME_NAME_0 = "Beradrome Kodiak PLUG-WBERA-V2";
const BERADROME_PLUGIN_0 = "0xAEe71E1C9506f7a1fa6c7655657d239EbC31b5AE";

// Beradrome Kodiak BRLY-WBERA-V2
// get from
const BERADROME_TOKEN_1 = "0xedd7deb874de23b168a5803a4f3a21bae9720b84";
const BERADROME_TOKENS_1 = [BRLY, WBERA];
const BERADROME_REWARDS_1 = [BRLY];
const BERADROME_SYMBOL_1 = "Kodiak BRLY-WBERA-V2";
const BERADROME_NAME_1 = "Beradrome Kodiak BRLY-WBERA-V2";
const BERADROME_PLUGIN_1 = "0x54128f98a3E2F22828B23Ba32F182A3f89a69BA2";

// Beradrome AB-KODIAK-rUSD-rUSDOT-500
// get from
const BERADROME_TOKEN_2 = "0x20a49a266AE70d07Ba066Ef1F8b6e670216Ab2a6";
const BERADROME_TOKENS_2 = [rUSD, rUSDOT];
const BERADROME_REWARDS_2 = [PRG];
const BERADROME_SYMBOL_2 = "AB-KODIAK-rUSD-rUSDOT-500";
const BERADROME_NAME_2 = "Beradrome AB-KODIAK-rUSD-rUSDOT-500";
const BERADROME_PLUGIN_2 = "0x15b09BA2a72035d84d19B10951F0bF116114DC7C";

// Beradrome AB-KODIAK-WBERA-BERAMO-10000
// get from
const BERADROME_TOKEN_3 = "0xf9845a03F7e6b06645A03a28b943C8A4B5fE7BCC";
const BERADROME_TOKENS_3 = [WBERA, BERAMO];
const BERADROME_REWARDS_3 = [BERAMO];
const BERADROME_SYMBOL_3 = "AB-KODIAK-WBERA-BERAMO-10000";
const BERADROME_NAME_3 = "Beradrome AB-KODIAK-WBERA-BERAMO-10000";
const BERADROME_PLUGIN_3 = "0x9162DeF1900e74Ca75D72fE8a01D5cDb7eA0CdF1";

// Beradrome LOCKS
const BERADROME_TOKEN_4 = LOCKS;
const BERADROME_TOKENS_4 = [LOCKS];
const BERADROME_REWARDS_4 = [PRG];
const BERADROME_SYMBOL_4 = "LOCKS";
const BERADROME_NAME_4 = "Beradrome LOCKS";
const BERADROME_PLUGIN_4 = "0x395bBE4Bc7DB06cc188FAC373adc4729391c6406";

// Beradrome HENLOCKED100M
const BERADROME_TOKEN_5 = HENLOCKED100M;
const BERADROME_TOKENS_5 = [HENLOCKED100M];
const BERADROME_REWARDS_5 = [HENLO];
const BERADROME_SYMBOL_5 = "HENLOCKED100M";
const BERADROME_NAME_5 = "Beradrome HENLOCKED100M";
const BERADROME_PLUGIN_5 = "0x4d070f167eCCcb50BAa779614674151BEC9ae345";

// Beradrome HENLOCKED330M
const BERADROME_TOKEN_6 = HENLOCKED330M;
const BERADROME_TOKENS_6 = [HENLOCKED330M];
const BERADROME_REWARDS_6 = [HENLO];
const BERADROME_SYMBOL_6 = "HENLOCKED330M";
const BERADROME_NAME_6 = "Beradrome HENLOCKED330M";
const BERADROME_PLUGIN_6 = "0xd7737fb01743A280928e919c8D2c13B9DbAAA389";

// Beradrome HENLOCKED420M
const BERADROME_TOKEN_7 = HENLOCKED420M;
const BERADROME_TOKENS_7 = [HENLOCKED420M];
const BERADROME_REWARDS_7 = [HENLO];
const BERADROME_SYMBOL_7 = "HENLOCKED420M";
const BERADROME_NAME_7 = "Beradrome HENLOCKED420M";
const BERADROME_PLUGIN_7 = "0x6e35e5aead525B229A2B160aB0F2479AF291223c";

// Beradrome HENLOCKED690M
const BERADROME_TOKEN_8 = HENLOCKED690M;
const BERADROME_TOKENS_8 = [HENLOCKED690M];
const BERADROME_REWARDS_8 = [HENLO];
const BERADROME_SYMBOL_8 = "HENLOCKED690M";
const BERADROME_NAME_8 = "Beradrome HENLOCKED690M";
const BERADROME_PLUGIN_8 = "0xCEc368c48De9C6Ccbcdd21fA3c84E63bc9Fa9D1b";

// Beradrome HENLOCKED1B
const BERADROME_TOKEN_9 = HENLOCKED1B;
const BERADROME_TOKENS_9 = [HENLOCKED1B];
const BERADROME_REWARDS_9 = [HENLO];
const BERADROME_SYMBOL_9 = "HENLOCKED1B";
const BERADROME_NAME_9 = "Beradrome HENLOCKED1B";
const BERADROME_PLUGIN_9 = "0x74B4b6AefE2771114A993Db831DaaA6Bba438A9B";

// Beradrome Kodiak BRLY-WBERA-V2
// get from
const BERADROME_TOKEN_10 = "0x9BE2467a28DFa5f685275784A7Cb8FD55ba9e350";
const BERADROME_TOKENS_10 = [BRLY, WBERA];
const BERADROME_REWARDS_10 = [BRLY];
const BERADROME_SYMBOL_10 = "Kodiak BRLY-WBERA-V2";
const BERADROME_NAME_10 = "Beradrome Kodiak BRLY-WBERA-V2";
const BERADROME_PLUGIN_10 = "0x8a311685b396e5959ba24293A04893F27ae80132";

// Beradrome stLBGT
const BERADROME_TOKEN_11 = stLBGT;
const BERADROME_TOKENS_11 = [stLBGT];
const BERADROME_REWARDS_11 = [LBGT, PPAW];
const BERADROME_SYMBOL_11 = "stLBGT";
const BERADROME_NAME_11 = "Beradrome stLBGT";
const BERADROME_PLUGIN_11 = "0xf0e04dEf2C751f17b3592ef10068F9F7E04f42e3";

// Beradrome HENLOCKED100M
const BERADROME_TOKEN_12 = HENLOCKED100M;
const BERADROME_TOKENS_12 = [HENLOCKED100M];
const BERADROME_REWARDS_12 = [HENLO];
const BERADROME_SYMBOL_12 = "HENLOCKED100M";
const BERADROME_NAME_12 = "Beradrome HENLOCKED100M";
const BERADROME_PLUGIN_12 = "0x926Aa5F8Eb3193F853711806D3f7dF3dEba99aAf";

// Beradrome HENLOCKED330M
const BERADROME_TOKEN_13 = HENLOCKED330M;
const BERADROME_TOKENS_13 = [HENLOCKED330M];
const BERADROME_REWARDS_13 = [HENLO];
const BERADROME_SYMBOL_13 = "HENLOCKED330M";
const BERADROME_NAME_13 = "Beradrome HENLOCKED330M";
const BERADROME_PLUGIN_13 = "0xB6dF86D016Bb026f7DfD55a6A0361eaB35ee2E7f";

// Beradrome HENLOCKED420M
const BERADROME_TOKEN_14 = HENLOCKED420M;
const BERADROME_TOKENS_14 = [HENLOCKED420M];
const BERADROME_REWARDS_14 = [HENLO];
const BERADROME_SYMBOL_14 = "HENLOCKED420M";
const BERADROME_NAME_14 = "Beradrome HENLOCKED420M";
const BERADROME_PLUGIN_14 = "0xe909901b40225959972554B0CeBe460b4213d194";

// Beradrome HENLOCKED690M
const BERADROME_TOKEN_15 = HENLOCKED690M;
const BERADROME_TOKENS_15 = [HENLOCKED690M];
const BERADROME_REWARDS_15 = [HENLO];
const BERADROME_SYMBOL_15 = "HENLOCKED690M";
const BERADROME_NAME_15 = "Beradrome HENLOCKED690M";
const BERADROME_PLUGIN_15 = "0xde67e60209A42D62BB1EBa4878eFC4b3B367c172";

// Beradrome HENLOCKED1B
const BERADROME_TOKEN_16 = HENLOCKED1B;
const BERADROME_TOKENS_16 = [HENLOCKED1B];
const BERADROME_REWARDS_16 = [HENLO];
const BERADROME_SYMBOL_16 = "HENLOCKED1B";
const BERADROME_NAME_16 = "Beradrome HENLOCKED1B";
const BERADROME_PLUGIN_16 = "0x534B96f6f0B134A9fBb0eAa1881546dfb327B632";

// Beradrome Kodiak WBERA-LOCKS-V2
const BERADROME_TOKEN_17 = "0x01cbf8bf3da700a1196fdce3f4b5b441f1a013e5";
const BERADROME_TOKENS_17 = [WBERA, LOCKS];
const BERADROME_REWARDS_17 = [PRG];
const BERADROME_SYMBOL_17 = "Kodiak WBERA-LOCKS-V2";
const BERADROME_NAME_17 = "Beradrome Kodiak WBERA-LOCKS-V2";
const BERADROME_PLUGIN_17 = "0x74A38Bfeedd95f65cbBF72eEDf01EAC77778bcF9";

// Beradrome AB-KODIAK-BERAMO-WBERA-10000
const BERADROME_TOKEN_18 = "0xE5F657557f2d0Bc2C45d2086Dc05C054E1Fe4985";
const BERADROME_TOKENS_18 = [BERAMO, WBERA];
const BERADROME_REWARDS_18 = [BERAMO];
const BERADROME_SYMBOL_18 = "AB-KODIAK-BERAMO-WBERA-10000";
const BERADROME_NAME_18 = "Beradrome AB-KODIAK-BERAMO-WBERA-10000";
const BERADROME_PLUGIN_18 = "0xb9794df80797469Db76ffB87C5Aac2Ed5dc912a4";

// Beradrome aSUGAR
const BERADROME_TOKEN_19 = aSUGAR;
const BERADROME_TOKENS_19 = [aSUGAR];
const BERADROME_REWARDS_19 = [WBERA];
const BERADROME_SYMBOL_19 = "aSUGAR";
const BERADROME_NAME_19 = "Beradrome aSUGAR";
const BERADROME_PLUGIN_19 = "0x025A2d6b9Fdf7d41cfA808a53d8c15A6ADcCF43b";

// Beradrome oriBGTOT
const BERADROME_TOKEN_20 = "0xDB78B4166580917c9604f8DdfBea5F49B493845c";
const BERADROME_TOKENS_20 = [oriBGT, oriBGTOT];
const BERADROME_REWARDS_20 = [PRG];
const BERADROME_SYMBOL_20 = "Steer-oriBGT/oriBGTOT";
const BERADROME_NAME_20 = "Beradrome Steer-oriBGT/oriBGTOT";
const BERADROME_PLUGIN_20 = "0x5f36C4E43e591da0C7F761B09274AB460c391bA1";

// Beradrome Kodiak BRR-HONEY-V2
const BERADROME_TOKEN_21 = "0xa8f9d7Ea6Baa104454bbcAD647A4c8b17778969C";
const BERADROME_TOKENS_21 = [BRR, HONEY];
const BERADROME_REWARDS_21 = [BRR];
const BERADROME_SYMBOL_21 = "Kodiak BRR-HONEY-V2";
const BERADROME_NAME_21 = "Beradrome Kodiak BRR-HONEY-V2";
const BERADROME_PLUGIN_21 = "0x585D231606bAd06213cba6a9f07F0e6e2F7d0885";

// Beradrome Arbera bruniBTC-brNECT
const BERADROME_TOKEN_22 = vsbruniBTC;
const BERADROME_TOKENS_22 = [bruniBTC, brNECT];
const BERADROME_REWARDS_22 = [POLLEN, WBERA, ARBERAPOINTS, BR];
const BERADROME_SYMBOL_22 = "Arbera bruniBTC-brNECT";
const BERADROME_NAME_22 = "Beradrome Arbera bruniBTC-brNECT";
const BERADROME_PLUGIN_22 = "0x7a07050774B88aF7db824204E16684666f7Fe878";

// Beradrome Arbera brarBERO-brLBGT
const BERADROME_TOKEN_23 = vsbrarBERO;
const BERADROME_TOKENS_23 = [brarBERO, brLBGT];
const BERADROME_REWARDS_23 = [PPAW, WBERA, ARBERAPOINTS, BR];
const BERADROME_SYMBOL_23 = "Arbera brarBERO-brLBGT";
const BERADROME_NAME_23 = "Beradrome Arbera brarBERO-brLBGT";
const BERADROME_PLUGIN_23 = "0x9968C2783D5d10a188C3Ae48a2AAEF20C5EdfA8E";

// Beradrome Arbera brLBGT-brNECT
const BERADROME_TOKEN_24 = vsbrLBGT;
const BERADROME_TOKENS_24 = [brLBGT, brNECT];
const BERADROME_REWARDS_24 = [POLLEN, WBERA, ARBERAPOINTS, PPAW];
const BERADROME_SYMBOL_24 = "Arbera brLBGT-brNECT";
const BERADROME_NAME_24 = "Beradrome Arbera brLBGT-brNECT";
const BERADROME_PLUGIN_24 = "0xE852179863cDA6cdba45ebB18Cf1DE4270AE98f9";

// Beradrome Arbera brOOGA-brNECT
const BERADROME_TOKEN_25 = vsbrOOGA;
const BERADROME_TOKENS_25 = [brOOGA, brNECT];
const BERADROME_REWARDS_25 = [POLLEN, WBERA, ARBERAPOINTS, OOGA];
const BERADROME_SYMBOL_25 = "Arbera brOOGA-brNECT";
const BERADROME_NAME_25 = "Beradrome Arbera brOOGA-brNECT";
const BERADROME_PLUGIN_25 = "0x0B83D7DfCf147353a71C7a68ACE95131Cec5099c";

// Beradrome BeraSwap MEAD-HONEY-STABLE
const BERADROME_TOKEN_26 = "0x2a9ea10b60ab02e9b8960a08b4996e6bf5ea5eab";
const BERADROME_TOKENS_26 = [MEAD, HONEY];
const BERADROME_REWARDS_26 = [MEAD];
const BERADROME_SYMBOL_26 = "BeraSwap MEAD-HONEY-STABLE";
const BERADROME_NAME_26 = "Beradrome BeraSwap MEAD-HONEY-STABLE";
const BERADROME_PLUGIN_26 = "0x47973d8Be713B9bD0B8cf617fE662e0F9d09F778";

// Beradrome Kodiak WBERA-fBOMB-V2
const BERADROME_TOKEN_27 = "0xaea0968e525f75d425b6959ba4fd66e1f7ff09ef";
const BERADROME_TOKENS_27 = [WBERA, fBOMB];
const BERADROME_REWARDS_27 = [fBOMB];
const BERADROME_SYMBOL_27 = "Kodiak WBERA-fBOMB-V2";
const BERADROME_NAME_27 = "Beradrome Kodiak WBERA-fBOMB-V2";
const BERADROME_PLUGIN_27 = "0x292473Fb85686D2ecBff0691366545CCD539a88F";

// Beradrome Kodiak Island WBERA-xfatBERA-0.05%
const BERADROME_TOKEN_28 = "0xc8b8ad5ca1bbb9090c9efc156bd87f45110344b5";
const BERADROME_TOKENS_28 = [WBERA, xfatBERA];
const BERADROME_REWARDS_28 = [xfatBERA];
const BERADROME_SYMBOL_28 = "Kodiak Island WBERA-xfatBERA-0.05%";
const BERADROME_NAME_28 = "Beradrome Kodiak Island WBERA-xfatBERA-0.05%";
const BERADROME_PLUGIN_28 = "0xA265117010Af9ed859206E847046355A6C845be6";

// Beradrome BurrBear NECT-canaNECT
const BERADROME_TOKEN_29 = "0x08f13c245571983E470816122630056c88BcE6cF";
const BERADROME_TOKENS_29 = [NECT, canaNECT];
const BERADROME_REWARDS_29 = [NECT];
const BERADROME_SYMBOL_29 = "BurrBear NECT-canaNECT";
const BERADROME_NAME_29 = "Beradrome BurrBear NECT-canaNECT";
const BERADROME_PLUGIN_29 = "0xFa5f675c93376255cc2Ed2c08544FFc4cD4e7a48";

// Beradrome Arbera brYEET-brNECT
const BERADROME_TOKEN_30 = "0x5565fA2e45F3df97dbFAF22Eb0E5C6e15555719f";
const BERADROME_TOKENS_30 = [brYEET, brNECT];
const BERADROME_REWARDS_30 = [POLLEN, WBERA, ARBERAPOINTS];
const BERADROME_SYMBOL_30 = "Arbera brYEET-brNECT";
const BERADROME_NAME_30 = "Beradrome Arbera brYEET-brNECT";
const BERADROME_PLUGIN_30 = "0xA3e301E3353F29aBb3C5e1d5Dd8DD988D079723a";

// Beradrome Arbera br3BC-brNECT
const BERADROME_TOKEN_31 = "0xC2fa20594f6B3bEFc2A04212C56790763443aF49";
const BERADROME_TOKENS_31 = [br3BC, brNECT];
const BERADROME_REWARDS_31 = [POLLEN, WBERA, ARBERAPOINTS];
const BERADROME_SYMBOL_31 = "Arbera br3BC-brNECT";
const BERADROME_NAME_31 = "Beradrome Arbera br3BC-brNECT";
const BERADROME_PLUGIN_31 = "0x63386EF367dE11cC8A83DC4eDdC09B47428a6693";

// Beradrome Arbera brPOLLEN-brNECT
const BERADROME_TOKEN_32 = "0x32D173F3a3b223200C7aE887a6A583CE2f0f613D";
const BERADROME_TOKENS_32 = [brPOLLEN, brNECT];
const BERADROME_REWARDS_32 = [POLLEN, WBERA, ARBERAPOINTS];
const BERADROME_SYMBOL_32 = "Arbera brPOLLEN-brNECT";
const BERADROME_NAME_32 = "Beradrome Arbera brPOLLEN-brNECT";
const BERADROME_PLUGIN_32 = "0x646fA0e2095a455A88BD178F98E9c0466A38Fa30";

// Beradrome Arbera brHENLO-brNECT
const BERADROME_TOKEN_33 = "0xe4b390e6220c4F4D41bAbdc4b7bf2d975200884d";
const BERADROME_TOKENS_33 = [brHENLO, brNECT];
const BERADROME_REWARDS_33 = [POLLEN, WBERA, ARBERAPOINTS];
const BERADROME_SYMBOL_33 = "Arbera brHENLO-brNECT";
const BERADROME_NAME_33 = "Beradrome Arbera brHENLO-brNECT";
const BERADROME_PLUGIN_33 = "0x444FDbdb82a38Cbeaf9Da2a105171dE4d5acAd86";

// Berachain Plugin Factory
const BERACHAIN_PLUGIN_FACTORY = "0x3E5b9a5D7D73D8781c4782910523b942dB831ef8";

// Berachain BeraSwap 50WBERA-50HONEY-WEIGHTED
// get from https://hub.berachain.com/pools/0x2c4a603a2aa5596287a06886862dc29d56dbc354000200000000000000000002/details/
const BERACHAIN_TOKEN_0 = "0x2c4a603A2aA5596287A06886862dc29d56DbC354";
const BERACHAIN_TOKENS_0 = [WBERA, HONEY];
const BERACHAIN_SYMBOL_0 = "BeraSwap 50WBERA-50HONEY-WEIGHTED";
const BERACHAIN_NAME_0 = "Beradrome BeraSwap 50WBERA-50HONEY-WEIGHTED";
const BERACHAIN_PLUGIN_0 = "0xAC5922bccb16A0213684427F0412fCf8F9500171";

// Berachain Beraswap 50WETH-50WBERA-WEIGHTED
// get from https://hub.berachain.com/pools/0xdd70a5ef7d8cfe5c5134b5f9874b09fb5ce812b4000200000000000000000003/details/
const BERACHAIN_TOKEN_1 = "0xDd70A5eF7d8CfE5C5134b5f9874b09Fb5Ce812b4";
const BERACHAIN_TOKENS_1 = [WETH, WBERA];
const BERACHAIN_SYMBOL_1 = "BeraSwap 50WETH-50WBERA-WEIGHTED";
const BERACHAIN_NAME_1 = "Beradrome BeraSwap 50WETH-50WBERA-WEIGHTED";
const BERACHAIN_PLUGIN_1 = "0x9dEcf33822180902DA7643F459bAb1163dB00Bad";

// Berachain BeraSwap 50WBTC-50WBERA-WEIGHTED
// get from https://hub.berachain.com/pools/0x38fdd999fe8783037db1bbfe465759e312f2d809000200000000000000000004/details/
const BERACHAIN_TOKEN_2 = "0x38fdD999Fe8783037dB1bBFE465759e312f2d809";
const BERACHAIN_TOKENS_2 = [WBTC, WBERA];
const BERACHAIN_SYMBOL_2 = "BeraSwap 50WBTC-50WBERA-WEIGHTED";
const BERACHAIN_NAME_2 = "Beradrome BeraSwap 50WBTC-50WBERA-WEIGHTED";
const BERACHAIN_PLUGIN_2 = "0x90c199CC9Eb30218B421045935EAb3E9D26d9f0C";

// Berachain BeraSwap USDCe-HONEY-STABLE
// get from https://hub.berachain.com/pools/0xf961a8f6d8c69e7321e78d254ecafbcc3a637621000000000000000000000001/details/
const BERACHAIN_TOKEN_3 = "0xF961a8f6d8c69E7321e78d254ecAfBcc3A637621";
const BERACHAIN_TOKENS_3 = [USDCe, HONEY];
const BERACHAIN_SYMBOL_3 = "BeraSwap USDCe-HONEY-STABLE";
const BERACHAIN_NAME_3 = "Beradrome BeraSwap USDCe-HONEY-STABLE";
const BERACHAIN_PLUGIN_3 = "0xCA35e42fA5DE0810ace624aD414B43C6966EF9a2";

// Berachain BeraSwap BYUSD-HONEY-STABLE
// get from https://hub.berachain.com/pools/0xde04c469ad658163e2a5e860a03a86b52f6fa8c8000000000000000000000000/details/
const BERACHAIN_TOKEN_4 = "0xde04c469ad658163e2a5e860a03a86b52f6fa8c8";
const BERACHAIN_TOKENS_4 = [BYUSD, HONEY];
const BERACHAIN_SYMBOL_4 = "BeraSwap BYUSD-HONEY-STABLE";
const BERACHAIN_NAME_4 = "Beradrome BeraSwap BYUSD-HONEY-STABLE";
const BERACHAIN_PLUGIN_4 = "0x968eC53B7bBC6284333719Cd23A653fD9cD4eD86";

// Berachain Kodiak Island BERAMO-WBERA-1%
const BERACHAIN_TOKEN_5 = "0x7aEF016302C3a27417372CF3AA74A1708D1Ca291";
const BERACHAIN_TOKENS_5 = [BERAMO, WBERA];
const BERACHAIN_SYMBOL_5 = "Kodiak Island BERAMO-WBERA-1%";
const BERACHAIN_NAME_5 = "Beradrome Berachain Kodiak Island BERAMO-WBERA-1%";
const BERACHAIN_PLUGIN_5 = "0x71b35b67393a0Bb17Cb72Eef840904Da2fF5C2b3";

// BeraPaw Plugin Factory
const BERAPAW_PLUGIN_FACTORY = "0x5Fd179B11359681e1bd39B8cb0bA623834613a64";

// BeraPaw BeraSwap 50WBERA-50HONEY-WEIGHTED
const BERAPAW_TOKEN_0 = "0x2c4a603A2aA5596287A06886862dc29d56DbC354";
const BERAPAW_TOKENS_0 = [WBERA, HONEY];
const BERAPAW_SYMBOL_0 = "BeraSwap 50WBERA-50HONEY-WEIGHTED";
const BERAPAW_NAME_0 = "Beradrome BeraPaw BeraSwap 50WBERA-50HONEY-WEIGHTED";
const BERAPAW_PLUGIN_0 = "0xEEb20cf591B2246a042Ff9eB8d734c38532BE46c";

// BeraPaw BeraSwap 50WETH-50WBERA-WEIGHTED
const BERAPAW_TOKEN_1 = "0xDd70A5eF7d8CfE5C5134b5f9874b09Fb5Ce812b4";
const BERAPAW_TOKENS_1 = [WETH, WBERA];
const BERAPAW_SYMBOL_1 = "BeraSwap 50WETH-50WBERA-WEIGHTED";
const BERAPAW_NAME_1 = "Beradrome BeraPaw BeraSwap 50WETH-50WBERA-WEIGHTED";
const BERAPAW_PLUGIN_1 = "0x29017de16D6F1F257E731A67E8C780616e655681";

// BeraPaw BeraSwap 50WBTC-50WBERA-WEIGHTED
const BERAPAW_TOKEN_2 = "0x38fdD999Fe8783037dB1bBFE465759e312f2d809";
const BERAPAW_TOKENS_2 = [WBTC, WBERA];
const BERAPAW_SYMBOL_2 = "BeraSwap 50WBTC-50WBERA-WEIGHTED";
const BERAPAW_NAME_2 = "Beradrome BeraPaw BeraSwap 50WBTC-50WBERA-WEIGHTED";
const BERAPAW_PLUGIN_2 = "0x28d6aD720C7e2002Fa8a4025CBeA220991605079";

// BeraPaw BeraSwap USDCe-HONEY-STABLE
const BERAPAW_TOKEN_3 = "0xF961a8f6d8c69E7321e78d254ecAfBcc3A637621";
const BERAPAW_TOKENS_3 = [USDCe, HONEY];
const BERAPAW_SYMBOL_3 = "BeraSwap USDCe-HONEY-STABLE";
const BERAPAW_NAME_3 = "Beradrome BeraPaw BeraSwap USDCe-HONEY-STABLE";
const BERAPAW_PLUGIN_3 = "0xbf65AB8E96c9a56e81E252554e41E6752118067D";

// BeraPaw BeraSwap BYUSD-HONEY-STABLE
const BERAPAW_TOKEN_4 = "0xde04c469ad658163e2a5e860a03a86b52f6fa8c8";
const BERAPAW_TOKENS_4 = [BYUSD, HONEY];
const BERAPAW_SYMBOL_4 = "BeraSwap BYUSD-HONEY-STABLE";
const BERAPAW_NAME_4 = "Beradrome BeraPaw BeraSwap BYUSD-HONEY-STABLE";
const BERAPAW_PLUGIN_4 = "0x8Dc5C77ffF4Dd77AA50D6F5f8C1DBdfdacA05e12";

// Infrared Plugin Factory
const INFRARED_PLUGIN_FACTORY = "0x1901f6371aECC135FEdCaDdCF15647C13EAc6DF0";

// Infrared BeraSwap 50WBERA-50HONEY-WEIGHTED
// get from https://hub.berachain.com/pools/0x2c4a603a2aa5596287a06886862dc29d56dbc354000200000000000000000002/details/
const INFRARED_VAULT_0 = "0xe2d8941dfb85435419D90397b09D18024ebeef2C";
const INFRARED_TOKENS_0 = [WBERA, HONEY];
const INFRARED_REWARDS_0 = [IBGT];
const INFRARED_SYMBOL_0 = "BeraSwap 50WBERA-50HONEY-WEIGHTED";
const INFRARED_NAME_0 = "Beradrome Infrared BeraSwap 50WBERA-50HONEY-WEIGHTED";
const INFRARED_PLUGIN_0 = "0xF7f7cFc9FEB0f40a158D607F7Aa04B9D18aC8CA6";

// Infrared BeraSwap 50WETH-50WBERA-WEIGHTED
// get from https://hub.berachain.com/pools/0xdd70a5ef7d8cfe5c5134b5f9874b09fb5ce812b4000200000000000000000003/details/
const INFRARED_VAULT_1 = "0x0dF14916796854d899576CBde69a35bAFb923c22";
const INFRARED_TOKENS_1 = [WETH, WBERA];
const INFRARED_REWARDS_1 = [IBGT];
const INFRARED_SYMBOL_1 = "BeraSwap 50WETH-50WBERA-WEIGHTED";
const INFRARED_NAME_1 = "Beradrome Infrared BeraSwap 50WETH-50WBERA-WEIGHTED";
const INFRARED_PLUGIN_1 = "0xdB79d6a9D43c69BEd341ee93d796f4aDDEF174cc";

// Infrared BeraSwap 50WBTC-50WBERA-WEIGHTED
// get from https://hub.berachain.com/pools/0x38fdd999fe8783037db1bbfe465759e312f2d809000200000000000000000004/details/
const INFRARED_VAULT_2 = "0x78beda3a06443f51718d746aDe95b5fAc094633E";
const INFRARED_TOKENS_2 = [WBTC, WBERA];
const INFRARED_REWARDS_2 = [IBGT];
const INFRARED_SYMBOL_2 = "BeraSwap 50WBTC-50WBERA-WEIGHTED";
const INFRARED_NAME_2 = "Beradrome Infrared BeraSwap 50WBTC-50WBERA-WEIGHTED";
const INFRARED_PLUGIN_2 = "0x8bBFCfF7FeA31aA4d330663111b85924dBad11B8";

// Infrared BeraSwap USDCe-HONEY-STABLE
// get from https://hub.berachain.com/pools/0xf961a8f6d8c69e7321e78d254ecafbcc3a637621000000000000000000000001/details/
const INFRARED_VAULT_3 = "0x1419515d3703d8F2cc72Fa6A341685E4f8e7e8e1";
const INFRARED_TOKENS_3 = [USDCe, HONEY];
const INFRARED_REWARDS_3 = [IBGT];
const INFRARED_SYMBOL_3 = "BeraSwap USDCe-HONEY-STABLE";
const INFRARED_NAME_3 = "Beradrome Infrared BeraSwap USDCe-HONEY-STABLE";
const INFRARED_PLUGIN_3 = "0x98DBeA9494f4630773D3Ef834c0734D28C39E440";

// Infrared BeraSwap BYUSD-HONEY-STABLE
// get from https://hub.berachain.com/pools/0xde04c469ad658163e2a5e860a03a86b52f6fa8c8000000000000000000000000/details/
const INFRARED_VAULT_4 = "0xbbB228B0D7D83F86e23a5eF3B1007D0100581613";
const INFRARED_TOKENS_4 = [BYUSD, HONEY];
const INFRARED_REWARDS_4 = [IBGT];
const INFRARED_SYMBOL_4 = "BeraSwap BYUSD-HONEY-STABLE";
const INFRARED_NAME_4 = "Beradrome Infrared BeraSwap BYUSD-HONEY-STABLE";
const INFRARED_PLUGIN_4 = "0xdbF1a45Cf806346a26B54c447fb4840b68828cDd";

// Infrared iBGT
// get from
const INFRARED_VAULT_5 = "0x75F3Be06b02E235f6d0E7EF2D462b29739168301";
const INFRARED_TOKENS_5 = [IBGT];
const INFRARED_REWARDS_5 = [HONEY];
const INFRARED_SYMBOL_5 = "iBGT";
const INFRARED_NAME_5 = "Beradrome Infrared iBGT";
const INFRARED_PLUGIN_5 = "0x0AB1f3949cebB19FDebC5934d1822EA9ca24aE6F";

// Infrared Kodiak brWETH-HONEY-V2
const INFRARED_VAULT_6 = "0x6124F8aB58Ea91C782F3eb7A971F0f8c8D3D7948";
const INFRARED_TOKENS_6 = [brWETH, HONEY];
const INFRARED_REWARDS_6 = [IBGT];
const INFRARED_SYMBOL_6 = "brWETH-HONEY-V2";
const INFRARED_NAME_6 = "Beradrome Infrared Kodiak brWETH-HONEY-V2";
const INFRARED_PLUGIN_6 = "0x8C3B6d5dF8fEB0D5E7c995FDBD9fB08ca29F38Af";

// Infrared Arbera brWBTC-WBERA-V2
const INFRARED_VAULT_7 = "0x55f94832E29DbFF2e02e99A333DE98E193cA4A1E";
const INFRARED_TOKENS_7 = [brWBTC, WBERA];
const INFRARED_REWARDS_7 = [IBGT];
const INFRARED_SYMBOL_7 = "Arbera brWBTC-WBERA-V2";
const INFRARED_NAME_7 = "Beradrome Infrared Arbera brWBTC-WBERA-V2";
const INFRARED_PLUGIN_7 = "0xeDDC88234A4e3E940c360cF84797BF0A02300cc5";

// Infrared Arbera brWETH-WBERA-V2
const INFRARED_VAULT_8 = "0x5A8351e45433Cc5cdCA495F65b25B02260a0662f";
const INFRARED_TOKENS_8 = [brWETH, WBERA];
const INFRARED_REWARDS_8 = [IBGT];
const INFRARED_SYMBOL_8 = "Arbera brWETH-WBERA-V2";
const INFRARED_NAME_8 = "Beradrome Infrared Arbera brWETH-WBERA-V2";
const INFRARED_PLUGIN_8 = "0xd0Ed2367e61CdE493830aDdE4db4A45753a5b1dC";

// Infrared Arbera briBGT-HONEY-V2
const INFRARED_VAULT_9 = "0x279479815cD4b4D713a25a2062068a9f97d3fEE1";
const INFRARED_TOKENS_9 = [briBGT, HONEY];
const INFRARED_REWARDS_9 = [IBGT];
const INFRARED_SYMBOL_9 = "Arbera briBGT-HONEY-V2";
const INFRARED_NAME_9 = "Beradrome Infrared Arbera briBGT-HONEY-V2";
const INFRARED_PLUGIN_9 = "0xDF1F4b4DF8615A0F677DEFE74Bc172174536ef52";

// Infrared Arbera brHENLO-HONEY-V2
const INFRARED_VAULT_10 = "0x39C48316F6C1F3D10d24F3eF5Ec09fF981227326";
const INFRARED_TOKENS_10 = [brHENLO, HONEY];
const INFRARED_REWARDS_10 = [IBGT];
const INFRARED_SYMBOL_10 = "Arbera brHENLO-HONEY-V2";
const INFRARED_NAME_10 = "Beradrome Infrared Arbera brHENLO-HONEY-V2";
const INFRARED_PLUGIN_10 = "0xa16f765C06A94bB68FcDE4334e0aF46a96107547";

// Infrared Arbera briBERA-HONEY-V2
const INFRARED_VAULT_11 = "0x2D3e186048e11dAb2a7FD05CaC369aD2e374309c";
const INFRARED_TOKENS_11 = [briBERA, HONEY];
const INFRARED_REWARDS_11 = [IBGT];
const INFRARED_SYMBOL_11 = "Arbera briBERA-HONEY-V2";
const INFRARED_NAME_11 = "Beradrome Infrared Arbera briBERA-HONEY-V2";
const INFRARED_PLUGIN_11 = "0x29FA6c7b23fE69162e7A5D3288190bB67d1A3Cb8";

// Infrared Arbera brBREAD-HONEY-V2
const INFRARED_VAULT_12 = "0x295272AD66A1D4014740C51E23ea3c0B65C57ffB";
const INFRARED_TOKENS_12 = [brBREAD, HONEY];
const INFRARED_REWARDS_12 = [IBGT];
const INFRARED_SYMBOL_12 = "Arbera brBREAD-HONEY-V2";
const INFRARED_NAME_12 = "Beradrome Infrared Arbera brBREAD-HONEY-V2";
const INFRARED_PLUGIN_12 = "0xbDDBEAbFCcA0a62b49aDDDb180D0CC4dea36f6fC";

// Infrared Arbera br3BC-HONEY-V2
const INFRARED_VAULT_13 = "0x9324E92dB831b4c4f6d5b4Aaba959288288E82f9";
const INFRARED_TOKENS_13 = [br3BC, HONEY];
const INFRARED_REWARDS_13 = [IBGT];
const INFRARED_SYMBOL_13 = "Arbera br3BC-HONEY-V2";
const INFRARED_NAME_13 = "Beradrome Infrared Arbera br3BC-HONEY-V2";
const INFRARED_PLUGIN_13 = "0xbB5ccd574AFe680a52f70dB8e6986E3Acc6E8185";

// Infrared Arbera brNAV-WBERA-V2
const INFRARED_VAULT_14 = "0x3803f8E21e8D6912Dd88eB1B2a9b7080aAA835Bd";
const INFRARED_TOKENS_14 = [brNAV, WBERA];
const INFRARED_REWARDS_14 = [IBGT];
const INFRARED_SYMBOL_14 = "Arbera brNAV-WBERA-V2";
const INFRARED_NAME_14 = "Beradrome Infrared Arbera brNAV-WBERA-V2";
const INFRARED_PLUGIN_14 = "0xc44Af1e4c4339EC7d100eDA0aF28D9815057b68b";

// Infrared Arbera brRAMEN-HONEY-V2
const INFRARED_VAULT_15 = "0xD94e20067f2b7E61De1554A02C728FF70010B717";
const INFRARED_TOKENS_15 = [brRAMEN, HONEY];
const INFRARED_REWARDS_15 = [IBGT];
const INFRARED_SYMBOL_15 = "Arbera brRAMEN-HONEY-V2";
const INFRARED_NAME_15 = "Beradrome Infrared Arbera brRAMEN-HONEY-V2";
const INFRARED_PLUGIN_15 = "0xefd9d044576962C57feb950B7f14890C24f6B18c";

// Infrared Arbera brwgBERA-WBERA-V2
const INFRARED_VAULT_16 = "0x49fcF736dD1194533eC0E5d6f8e7167d477Ed7fe";
const INFRARED_TOKENS_16 = [brwgBERA, WBERA];
const INFRARED_REWARDS_16 = [IBGT];
const INFRARED_SYMBOL_16 = "Arbera brwgBERA-WBERA-V2";
const INFRARED_NAME_16 = "Beradrome Infrared Arbera brwgBERA-WBERA-V2";
const INFRARED_PLUGIN_16 = "0xD17Ea394815d98B6760b177A05239e64296f33DB";

// Infrared Arbera brberaETH-WBERA-V2
const INFRARED_VAULT_17 = "0x6dB7c4C03E2244B2751527FbA06F58b0B5E7B417";
const INFRARED_TOKENS_17 = [brberaETH, WBERA];
const INFRARED_REWARDS_17 = [IBGT];
const INFRARED_SYMBOL_17 = "Arbera brberaETH-WBERA-V2";
const INFRARED_NAME_17 = "Beradrome Infrared Arbera brberaETH-WBERA-V2";
const INFRARED_PLUGIN_17 = "0x42e4c96C88e8FB9d57fEf775AdADECd7Ba434c2A";

// Infrared Arbera brYEET-HONEY-V2
const INFRARED_VAULT_18 = "0xD1109c3269B46Aa406398361D727225421EE0F28";
const INFRARED_TOKENS_18 = [brYEET, HONEY];
const INFRARED_REWARDS_18 = [IBGT];
const INFRARED_SYMBOL_18 = "Arbera brYEET-HONEY-V2";
const INFRARED_NAME_18 = "Beradrome Infrared Arbera brYEET-HONEY-V2";
const INFRARED_PLUGIN_18 = "0x2D9AEDee285D6e3eDD082162ca83ab28E4382891";

// BurrBear Plugin Factory
const BURRBEAR_PLUGIN_FACTORY = "0x37bDB41e497C5b93C9D0652B52cF9979B1c8751e";

// BurrBear NECT/USDC/HONEY
const BURRBEAR_PID_0 = "0";
const BURRBEAR_TOKENS_0 = [NECT, USDCe, HONEY];
const BURRBEAR_SYMBOL_0 = "NECT/USDC/HONEY";
const BURRBEAR_NAME_0 = "Beradrome BurrBear NECT/USDC/HONEY";
const BURRBEAR_PLUGIN_0 = "0xDC296fA14deeD5762c7bcb38afac7c958839C019";

// BurrBear WBERA-wgBERA
const BURRBEAR_PID_1 = "1";
const BURRBEAR_TOKENS_1 = [WBERA, WGBERA];
const BURRBEAR_SYMBOL_1 = "WBERA-wgBERA";
const BURRBEAR_NAME_1 = "Beradrome BurrBear WBERA-wgBERA";
const BURRBEAR_PLUGIN_1 = "0x991214424e93331434b4BD2DAB2E6A2a6408E30D";

// BurrBear NECT-wgBERA
const BURRBEAR_PID_2 = "2";
const BURRBEAR_TOKENS_2 = [NECT, WGBERA];
const BURRBEAR_SYMBOL_2 = "50NECT-50wgBERA";
const BURRBEAR_NAME_2 = "Beradrome BurrBear 50NECT-50wgBERA";
const BURRBEAR_PLUGIN_2 = "0x2946c4aA82c14bA9355fF2D93645586690c1B579";

// Trifecta Plugin Factory
const TRIFECTA_PLUGIN_FACTORY = "0x5CEf8C04AD128Cf25142111f868ab09D6eA25f6A";

// Trifecta Kodiak YEET-WBERA
const TRIFECTA_TOKEN_0 = "0xEc8BA456b4e009408d0776cdE8B91f8717D13Fa1";
const TRIFECTA_FARM_0 = "0x1C8e199c6c42D5ccE652Cf02002694D937118177";
const TRIFECTA_TOKEN0_0 = YEET;
const TRIFECTA_TOKEN1_0 = WBERA;
const TRIFECTA_OTHER_REWARDS_0 = [YEET];
const TRIFECTA_SYMBOL_0 = "Kodiak Island WBERA-YEET-1%";
const TRIFECTA_NAME_0 =
  "Beradrome Liquidity Trifecta Kodiak Island WBERA-YEET-1%";
const TRIFECTA_PLUGIN_0 = "0x26aE252B4607826f03b8e701a792346864bec758";

// Trifecta Kodiak WBERA-RAMEN
const TRIFECTA_TOKEN_1 = "0x93A913351CaE2D8C82C4b85f699726947eB76d32";
const TRIFECTA_FARM_1 = "0x6F22221dC5845A25597BC96629D92F2b4979D943";
const TRIFECTA_TOKEN0_1 = WBERA;
const TRIFECTA_TOKEN1_1 = RAMEN;
const TRIFECTA_OTHER_REWARDS_1 = [RAMEN];
const TRIFECTA_SYMBOL_1 = "Kodiak Island WBERA-RAMEN-1%";
const TRIFECTA_NAME_1 =
  "Beradrome Liquidity Trifecta Kodiak Island WBERA-RAMEN-1%";
const TRIFECTA_PLUGIN_1 = "0x75b3C55fc3C0a2f874eEeC2C056fA336FB78fECa";

// Trifecta Kodiak BERA-BITCOIN
const TRIFECTA_TOKEN_2 = "0x2CaFe99dB26Cf86Ae8587F5934830d25aD5C3Cb3";
const TRIFECTA_FARM_2 = "0xB4a1519956ceE0798EAac3De08F1531F58a0C950";
const TRIFECTA_TOKEN0_2 = WBERA;
const TRIFECTA_TOKEN1_2 = BITCOIN;
const TRIFECTA_OTHER_REWARDS_2 = [BITCOIN];
const TRIFECTA_SYMBOL_2 = "Kodiak Island WBERA-BITCOIN-1%";
const TRIFECTA_NAME_2 =
  "Beradrome Liquidity Trifecta Kodiak Island WBERA-BITCOIN-1%";
const TRIFECTA_PLUGIN_2 = "0xfB58F9fab6aa614001304d6296F46069BDcac355";

// Trifecta Kodiak Island BREAD-OHM
const TRIFECTA_TOKEN_3 = "0xd9a747880393f7c33cEf1aea36909b36d421F7E5";
const TRIFECTA_FARM_3 = "0xc080B212cAAA1eBBCcDe1434D6EFe6359eDa2084";
const TRIFECTA_TOKEN0_3 = BREAD;
const TRIFECTA_TOKEN1_3 = OHM;
const TRIFECTA_OTHER_REWARDS_3 = [WBERA, YEET, OHM];
const TRIFECTA_SYMBOL_3 = "Kodiak Island BREAD-OHM-0.3%";
const TRIFECTA_NAME_3 =
  "Beradrome Liquidity Trifecta Kodiak Island BREAD-OHM-0.3%";
const TRIFECTA_PLUGIN_3 = "0x59c347Ff753eED87f610Fc4163d8A83b8a6e438F";

// Infrared Trifecta Plugin Factory
const INFRARED_TRIFECTA_PLUGIN_FACTORY =
  "0xE31E90ceE704A24ad84caBa1CA31B827fA05FE3d";

// Infrared Trifecta Kodiak Island OHM-HONEY-0.3%
const INFRARED_TRIFECTA_VAULT_0 = "0xa57Cb177Beebc35A1A26A286951a306d9B752524";
const INFRARED_TRIFECTA_TOKENS_0 = [OHM, HONEY];
const INFRARED_TRIFECTA_REWARDS_0 = [OHM];
const INFRARED_TRIFECTA_SYMBOL_0 = "Kodiak Island OHM-HONEY-0.3%";
const INFRARED_TRIFECTA_NAME_0 =
  "Beradrome Infrared Trifecta Kodiak Island OHM-HONEY-0.3%";
const INFRARED_TRIFECTA_PLUGIN_0 = "0x125bd220ac62DBE312D4752FFB57551E9b3c1848";

// Infrared Trifecta Kodiak Island WBERA-POLLEN-1%
const INFRARED_TRIFECTA_VAULT_1 = "0xacB6fa1BE2B235474Ac5B0c175b2A16189D4D103";
const INFRARED_TRIFECTA_TOKENS_1 = [WBERA, POLLEN];
const INFRARED_TRIFECTA_REWARDS_1 = [POLLEN, NECT];
const INFRARED_TRIFECTA_SYMBOL_1 = "Kodiak Island WBERA-POLLEN-1%";
const INFRARED_TRIFECTA_NAME_1 =
  "Beradrome Infrared Trifecta Kodiak Island WBERA-POLLEN-1%";
const INFRARED_TRIFECTA_PLUGIN_1 = "0xd4e1b8979b52Aba704881336a0359DFB61caAf44";

// Infrared Trifecta Arbera brBERATARDIO-HONEY-V2
const INFRARED_TRIFECTA_VAULT_2 = "0x8b2dED0509749Db9D42A7812D79a317E2a278629";
const INFRARED_TRIFECTA_TOKENS_2 = [brBERATARDIO, HONEY];
const INFRARED_TRIFECTA_REWARDS_2 = [brBERATARDIO]; // wrong reward
const INFRARED_TRIFECTA_SYMBOL_2 = "Arbera brBERATARDIO-HONEY-V2";
const INFRARED_TRIFECTA_NAME_2 =
  "Beradrome Infrared Trifecta Arbera brBERATARDIO-HONEY-V2";
const INFRARED_TRIFECTA_PLUGIN_2 = "0xcf976b8b0e7d4e8da20957bF4a847bbE449CD7B6";

// Infrared Trifecta Arbera brWETH-WBERA-V2
const INFRARED_TRIFECTA_VAULT_3 = "0x830eD09fe11C26C4df9217837445A0f78aB93D5E";
const INFRARED_TRIFECTA_TOKENS_3 = [brWETH, WBERA];
const INFRARED_TRIFECTA_REWARDS_3 = [brWETH]; // wrong reward
const INFRARED_TRIFECTA_SYMBOL_3 = "Arbera brWETH-WBERA-V2";
const INFRARED_TRIFECTA_NAME_3 =
  "Beradrome Infrared Trifecta Arbera brWETH-WBERA-V2";
const INFRARED_TRIFECTA_PLUGIN_3 = "0xcf04280c46C0F42EE576dF83fA2f1892d24fAE4b";

// Infrared Trifecta Arbera brUSDbr-HONEY-V2
const INFRARED_TRIFECTA_VAULT_4 = "0x0247F04EC90Cf201082A16f622137884098A61c8";
const INFRARED_TRIFECTA_TOKENS_4 = [brUSDbr, HONEY];
const INFRARED_TRIFECTA_REWARDS_4 = [brUSDbr]; // wrong reward
const INFRARED_TRIFECTA_SYMBOL_4 = "Arbera brUSDbr-HONEY-V2";
const INFRARED_TRIFECTA_NAME_4 =
  "Beradrome Infrared Trifecta Arbera brUSDbr-HONEY-V2";
const INFRARED_TRIFECTA_PLUGIN_4 = "0xFA8C7D92Ac693556AEA533578E31488166f89577";

// Infrared Trifecta Arbera brHENLO-HONEY-V2
const INFRARED_TRIFECTA_VAULT_5 = "0xDba05165Dd4B23f993330dD696E9620f536F4A89";
const INFRARED_TRIFECTA_TOKENS_5 = [brHENLO2, HONEY];
const INFRARED_TRIFECTA_REWARDS_5 = [WBERA];
const INFRARED_TRIFECTA_SYMBOL_5 = "Arbera brHENLO-HONEY-V2";
const INFRARED_TRIFECTA_NAME_5 =
  "Beradrome Infrared Trifecta Arbera brHENLO-HONEY-V2";
const INFRARED_TRIFECTA_PLUGIN_5 = "0x8A7681Fa24c9Dd81CD67c17c7982Db1Aa31E1476";

// Infrared Trifecta Arbera brBM-HONEY-V2
const INFRARED_TRIFECTA_VAULT_6 = "0xeb5433f00e2a76289b19C07281e2fAE7936da45c";
const INFRARED_TRIFECTA_TOKENS_6 = [brBM, HONEY];
const INFRARED_TRIFECTA_REWARDS_6 = [WBERA];
const INFRARED_TRIFECTA_SYMBOL_6 = "Arbera brBM-HONEY-V2";
const INFRARED_TRIFECTA_NAME_6 =
  "Beradrome Infrared Trifecta Arbera brBM-HONEY-V2";
const INFRARED_TRIFECTA_PLUGIN_6 = "0xf6f9ebF961Cf27b0b33771e9B34072AcA46F38E6";

// Infrared Trifecta Arbera brNECT-HONEY-V2
const INFRARED_TRIFECTA_VAULT_7 = "0x3EEAc49C542a53986c003260D5879223d5BAAc85";
const INFRARED_TRIFECTA_TOKENS_7 = [brNECT, HONEY];
const INFRARED_TRIFECTA_REWARDS_7 = [WBERA];
const INFRARED_TRIFECTA_SYMBOL_7 = "Arbera brNECT-HONEY-V2";
const INFRARED_TRIFECTA_NAME_7 =
  "Beradrome Infrared Trifecta Arbera brNECT-HONEY-V2";
const INFRARED_TRIFECTA_PLUGIN_7 = "0x44fB54A68647f7e83ec11f181848826725fbDB0d";

// Infrared Trifecta Arbera brsUSDe-HONEY-V2
const INFRARED_TRIFECTA_VAULT_8 = "0x012f11CeAA43c2F972F4A18D533587930A4eE414";
const INFRARED_TRIFECTA_TOKENS_8 = [brsUSDe, HONEY];
const INFRARED_TRIFECTA_REWARDS_8 = [WBERA];
const INFRARED_TRIFECTA_SYMBOL_8 = "Arbera brsUSDe-HONEY-V2";
const INFRARED_TRIFECTA_NAME_8 =
  "Beradrome Infrared Trifecta Arbera brsUSDe-HONEY-V2";
const INFRARED_TRIFECTA_PLUGIN_8 = "0x6470dedE10aEF1FF96A5df10FCD62F0D006a5540";

// Infrared Trifecta Arbera brOHM-HONEY-V2
const INFRARED_TRIFECTA_VAULT_9 = "0x46DF5c6Bf66c1cca533e9Cd3b1420cd8aBEb36D0";
const INFRARED_TRIFECTA_TOKENS_9 = [brOHM, HONEY];
const INFRARED_TRIFECTA_REWARDS_9 = [WBERA];
const INFRARED_TRIFECTA_SYMBOL_9 = "Arbera brOHM-HONEY-V2";
const INFRARED_TRIFECTA_NAME_9 =
  "Beradrome Infrared Trifecta Arbera brOHM-HONEY-V2";
const INFRARED_TRIFECTA_PLUGIN_9 = "0x6C1bcAd0edBc803b20f9a6aEEBcc7153B463d511";

// Infrared Trifecta Arbera brWBTC-WBERA-V2
const INFRARED_TRIFECTA_VAULT_10 = "0x4cA115e13dFF2602971d2B7C47cF47b0C6078091";
const INFRARED_TRIFECTA_TOKENS_10 = [brWBTC2, WBERA];
const INFRARED_TRIFECTA_REWARDS_10 = [WBERA];
const INFRARED_TRIFECTA_SYMBOL_10 = "Arbera brWBTC-WBERA-V2";
const INFRARED_TRIFECTA_NAME_10 =
  "Beradrome Infrared Trifecta Arbera brWBTC-WBERA-V2";
const INFRARED_TRIFECTA_PLUGIN_10 =
  "0x1eAB0e1Fc8D4d01BBb11609C12855F06f2d0a246";

// Infrared Trifecta Kodiak Island NECT-LBGT-0.3%
const INFRARED_TRIFECTA_VAULT_11 = "0x1c13b2B22a4fb6D5E70fBf0518208EDDF28D4486";
const INFRARED_TRIFECTA_TOKENS_11 = [NECT, LBGT];
const INFRARED_TRIFECTA_REWARDS_11 = [POLLEN, PPAW];
const INFRARED_TRIFECTA_SYMBOL_11 = "Kodiak Island NECT-LBGT-0.3%";
const INFRARED_TRIFECTA_NAME_11 =
  "Beradrome Infrared Trifecta Kodiak Island NECT-LBGT-0.3%";
const INFRARED_TRIFECTA_PLUGIN_11 =
  "0xD5D4680bBec4419FFbC5Eff51820D09fE5066B1C";

// Bullas BULL iSH
const BULLAS_PLUGIN = "0xE259A689D13139F413eE693BE27181192319a629";

// Gumball BentoBera
const GUMBALL_PLUGIN_0 = "";

// Contract Variables
let OTOKENFactory, VTOKENFactory, feesFactory, rewarderFactory;
let TOKEN, OTOKEN, VTOKEN, fees, rewarder, governor;
let voter, minter, gaugeFactory, bribeFactory;
let multicall, controller, trifectaMulticall;
let helper;

let beradromePlugin;
let beradromePluginFactory;

let berachainPlugin;
let berachainPluginFactory;

let infraredPlugin;
let infraredPluginFactory;

let berapawPlugin;
let berapawPluginFactory;

let burrBearPlugin;
let burrBearPluginFactory;

let trifectaPlugin;
let trifectaPluginFactory;

let infraredTrifectaPlugin;
let infraredTrifectaPluginFactory;

async function getContracts() {
  OTOKENFactory = await ethers.getContractAt(
    "contracts/OTOKENFactory.sol:OTOKENFactory",
    "0xbBc46f6DBB199c85CCa67aD06C4D4949d09caFc3"
  );
  VTOKENFactory = await ethers.getContractAt(
    "contracts/VTOKENFactory.sol:VTOKENFactory",
    "0xbCDa85b9b140ddBF7C1467BE867E0274c91977E8"
  );
  feesFactory = await ethers.getContractAt(
    "contracts/TOKENFeesFactory.sol:TOKENFeesFactory",
    "0xc831A63931AeF4017A9ecb65099F7eC1D367e414"
  );
  rewarderFactory = await ethers.getContractAt(
    "contracts/VTOKENRewarderFactory.sol:VTOKENRewarderFactory",
    "0x07C2E5EA884c755E374E360BC2815aE28dAbCc38"
  );

  TOKEN = await ethers.getContractAt(
    "contracts/TOKEN.sol:TOKEN",
    "0x7838CEc5B11298Ff6a9513Fa385621B765C74174"
  );
  OTOKEN = await ethers.getContractAt(
    "contracts/OTOKENFactory.sol:OTOKEN",
    await TOKEN.OTOKEN()
  );
  VTOKEN = await ethers.getContractAt(
    "contracts/VTOKENFactory.sol:VTOKEN",
    await TOKEN.VTOKEN()
  );
  fees = await ethers.getContractAt(
    "contracts/TOKENFeesFactory.sol:TOKENFees",
    await TOKEN.FEES()
  );
  rewarder = await ethers.getContractAt(
    "contracts/VTOKENRewarderFactory.sol:VTOKENRewarder",
    await VTOKEN.rewarder()
  );
  governor = await ethers.getContractAt(
    "contracts/TOKENGovernor.sol:TOKENGovernor",
    "0x8fE450e4B403fA857Cb126E7a603B5eba3Af398a"
  );

  gaugeFactory = await ethers.getContractAt(
    "contracts/GaugeFactory.sol:GaugeFactory",
    "0x8d97b0B334EB5076F2CE66a7B7ffAc1931622022"
  );
  bribeFactory = await ethers.getContractAt(
    "contracts/BribeFactory.sol:BribeFactory",
    "0xEB4b7929A5E084b2817Ee0085F9A2B94e2f4F226"
  );
  voter = await ethers.getContractAt(
    "contracts/Voter.sol:Voter",
    "0xd7ea36ECA1cA3E73bC262A6D05DB01E60AE4AD47"
  );
  minter = await ethers.getContractAt(
    "contracts/Minter.sol:Minter",
    "0xe2719e4C3AC97890b2AF3783A3B892c3a6FF041C"
  );

  // multicall = await ethers.getContractAt(
  //   "contracts/Multicall.sol:Multicall",
  //   "0xDAd4AC347c08e05365f10Fd9B4CCD137bA18a39D"
  // );
  // trifectaMulticall = await ethers.getContractAt(
  //   "contracts/TrifectaMulticall.sol:TrifectaMulticall",
  //   "0xA431bA493D5A63Fa77c69284535E105fB98f0472"
  // );
  // controller = await ethers.getContractAt(
  //   "contracts/Controller.sol:Controller",
  //   "0x65e3249EccD38aD841345dA5beBBebE3a73a596C"
  // );
  helper = await ethers.getContractAt(
    "contracts/BeradromeHelper.sol:BeradromeHelper",
    "0x05e970Cf64b44456e019bAaA63361864D55d900E"
  );

  beradromePluginFactory = await ethers.getContractAt(
    "contracts/plugins/berachain/BeradromePluginFactory.sol:BeradromePluginFactory",
    BERADROME_PLUGIN_FACTORY
  );

  beradromePlugin = await ethers.getContractAt(
    "contracts/plugins/berachain/BeradromePluginFactory.sol:BeradromePlugin",
    BERADROME_PLUGIN_0
  );

  berachainPluginFactory = await ethers.getContractAt(
    "contracts/plugins/berachain/BerachainPluginFactory.sol:BerachainPluginFactory",
    BERACHAIN_PLUGIN_FACTORY
  );

  berachainPlugin = await ethers.getContractAt(
    "contracts/plugins/berachain/BerachainPluginFactory.sol:BerachainPlugin",
    BERACHAIN_PLUGIN_0
  );

  infraredPluginFactory = await ethers.getContractAt(
    "contracts/plugins/berachain/InfraredPluginFactory.sol:InfraredPluginFactory",
    INFRARED_PLUGIN_FACTORY
  );

  infraredPlugin = await ethers.getContractAt(
    "contracts/plugins/berachain/InfraredPluginFactory.sol:InfraredPlugin",
    INFRARED_PLUGIN_0
  );

  berapawPluginFactory = await ethers.getContractAt(
    "contracts/plugins/berachain/BeraPawPluginFactory.sol:BeraPawPluginFactory",
    BERAPAW_PLUGIN_FACTORY
  );

  berapawPlugin = await ethers.getContractAt(
    "contracts/plugins/berachain/BeraPawPluginFactory.sol:BeraPawPlugin",
    BERAPAW_PLUGIN_0
  );

  burrBearPluginFactory = await ethers.getContractAt(
    "contracts/plugins/berachain/BurrBearPluginFactory.sol:BurrBearPluginFactory",
    BURRBEAR_PLUGIN_FACTORY
  );

  burrBearPlugin = await ethers.getContractAt(
    "contracts/plugins/berachain/BurrBearPluginFactory.sol:BurrBearPlugin",
    BURRBEAR_PLUGIN_0
  );

  trifectaPluginFactory = await ethers.getContractAt(
    "contracts/plugins/berachain/TrifectaPluginFactory.sol:TrifectaPluginFactory",
    TRIFECTA_PLUGIN_FACTORY
  );

  trifectaPlugin = await ethers.getContractAt(
    "contracts/plugins/berachain/TrifectaPluginFactory.sol:TrifectaPlugin",
    TRIFECTA_PLUGIN_0
  );

  infraredTrifectaPluginFactory = await ethers.getContractAt(
    "contracts/plugins/berachain/InfraredTrifectaPluginFactory.sol:InfraredTrifectaPluginFactory",
    INFRARED_TRIFECTA_PLUGIN_FACTORY
  );

  infraredTrifectaPlugin = await ethers.getContractAt(
    "contracts/plugins/berachain/InfraredTrifectaPluginFactory.sol:InfraredTrifectaPlugin",
    INFRARED_TRIFECTA_PLUGIN_0
  );

  console.log("Contracts Retrieved");
}

async function deployOTOKENFactory() {
  console.log("Starting OTOKENFactory Deployment");
  const OTOKENFactoryArtifact = await ethers.getContractFactory(
    "OTOKENFactory"
  );
  const OTOKENFactoryContract = await OTOKENFactoryArtifact.deploy({
    gasPrice: ethers.gasPrice,
  });
  OTOKENFactory = await OTOKENFactoryContract.deployed();
  await sleep(5000);
  console.log("OTOKENFactory Deployed at:", OTOKENFactory.address);
}

async function deployVTOKENFactory() {
  console.log("Starting VTOKENFactory Deployment");
  const VTOKENFactoryArtifact = await ethers.getContractFactory(
    "VTOKENFactory"
  );
  const VTOKENFactoryContract = await VTOKENFactoryArtifact.deploy({
    gasPrice: ethers.gasPrice,
  });
  VTOKENFactory = await VTOKENFactoryContract.deployed();
  await sleep(5000);
  console.log("VTOKENFactory Deployed at:", VTOKENFactory.address);
}

async function deployFeesFactory() {
  console.log("Starting FeesFactory Deployment");
  const feesFactoryArtifact = await ethers.getContractFactory(
    "TOKENFeesFactory"
  );
  const feesFactoryContract = await feesFactoryArtifact.deploy({
    gasPrice: ethers.gasPrice,
  });
  feesFactory = await feesFactoryContract.deployed();
  await sleep(5000);
  console.log("FeesFactory Deployed at:", feesFactory.address);
}

async function deployRewarderFactory() {
  console.log("Starting RewarderFactory Deployment");
  const rewarderFactoryArtifact = await ethers.getContractFactory(
    "VTOKENRewarderFactory"
  );
  const rewarderFactoryContract = await rewarderFactoryArtifact.deploy({
    gasPrice: ethers.gasPrice,
  });
  rewarderFactory = await rewarderFactoryContract.deployed();
  await sleep(5000);
  console.log("RewarderFactory Deployed at:", rewarderFactory.address);
}

async function printFactoryAddresses() {
  console.log("**************************************************************");
  console.log("OTOKENFactory: ", OTOKENFactory.address);
  console.log("VTOKENFactory: ", VTOKENFactory.address);
  console.log("FeesFactory: ", feesFactory.address);
  console.log("RewarderFactory: ", rewarderFactory.address);
  console.log("**************************************************************");
}

async function deployTOKEN() {
  console.log("Starting TOKEN Deployment");
  const TOKENArtifact = await ethers.getContractFactory("TOKEN");
  const TOKENContract = await TOKENArtifact.deploy(
    BASE_ADDRESS,
    convert(MARKET_RESERVES, 18),
    OTOKENFactory.address,
    VTOKENFactory.address,
    rewarderFactory.address,
    feesFactory.address,
    VAULT_FACTORY,
    {
      gasPrice: ethers.gasPrice,
    }
  );
  TOKEN = await TOKENContract.deployed();
  await sleep(5000);
  console.log("TOKEN Deployed at:", TOKEN.address);
}

async function deployGovernor() {
  console.log("Starting Governor Deployment");
  const governorArtifact = await ethers.getContractFactory("TOKENGovernor");
  const governorContract = await governorArtifact.deploy(VTOKEN.address, {
    gasPrice: ethers.gasPrice,
  });
  governor = await governorContract.deployed();
  await sleep(5000);
  console.log("Governor Deployed at:", governor.address);
}

async function printTokenAddresses() {
  console.log("**************************************************************");
  console.log("BERO: ", TOKEN.address);
  console.log("oBERO: ", OTOKEN.address);
  console.log("hiBERO: ", VTOKEN.address);
  console.log("Fees: ", fees.address);
  console.log("Rewarder: ", rewarder.address);
  console.log("Governor: ", governor.address);
  console.log("**************************************************************");
}

async function verifyTOKEN() {
  console.log("Starting TOKEN Verification");
  await hre.run("verify:verify", {
    address: TOKEN.address,
    contract: "contracts/TOKEN.sol:TOKEN",
    constructorArguments: [
      BASE_ADDRESS,
      convert(MARKET_RESERVES, 18),
      OTOKENFactory.address,
      VTOKENFactory.address,
      rewarderFactory.address,
      feesFactory.address,
      VAULT_FACTORY,
    ],
  });
  console.log("TOKEN Verified");
}

async function verifyOTOKEN(wallet) {
  console.log("Starting OTOKEN Verification");
  await hre.run("verify:verify", {
    address: OTOKEN.address,
    contract: "contracts/OTOKENFactory.sol:OTOKEN",
    constructorArguments: [wallet.address],
  });
  console.log("OTOKEN Verified");
}

async function verifyVTOKEN() {
  console.log("Starting VTOKEN Verification");
  await hre.run("verify:verify", {
    address: VTOKEN.address,
    contract: "contracts/VTOKENFactory.sol:VTOKEN",
    constructorArguments: [
      TOKEN.address,
      OTOKEN.address,
      rewarderFactory.address,
      VAULT_FACTORY,
    ],
  });
  console.log("VTOKEN Verified");
}

async function verifyFees() {
  console.log("TOKENFees Deployed at:", fees.address);
  console.log("Starting TOKENFees Verification");
  await hre.run("verify:verify", {
    address: await fees.address,
    contract: "contracts/TOKENFeesFactory.sol:TOKENFees",
    constructorArguments: [
      rewarder.address,
      TOKEN.address,
      BASE_ADDRESS,
      OTOKEN.address,
    ],
  });
  console.log("TOKENFees Verified");
}

async function verifyRewarder() {
  console.log("Rewarder Deployed at:", rewarder.address);
  console.log("Starting Rewarder Verification");
  await hre.run("verify:verify", {
    address: rewarder.address,
    contract: "contracts/VTOKENRewarderFactory.sol:VTOKENRewarder",
    constructorArguments: [VTOKEN.address],
  });
  console.log("Rewarder Verified");
}

async function verifyGovernor() {
  console.log("Starting Governor Verification");
  await hre.run("verify:verify", {
    address: governor.address,
    contract: "contracts/TOKENGovernor.sol:TOKENGovernor",
    constructorArguments: [VTOKEN.address],
  });
  console.log("Governor Verified");
}

async function deployGaugeFactory(wallet) {
  console.log("Starting GaugeFactory Deployment");
  const gaugeFactoryArtifact = await ethers.getContractFactory("GaugeFactory");
  const gaugeFactoryContract = await gaugeFactoryArtifact.deploy(wallet, {
    gasPrice: ethers.gasPrice,
  });
  gaugeFactory = await gaugeFactoryContract.deployed();
  await sleep(5000);
  console.log("GaugeFactory Deployed at:", gaugeFactory.address);
}

async function deployBribeFactory(wallet) {
  console.log("Starting BribeFactory Deployment");
  const bribeFactoryArtifact = await ethers.getContractFactory("BribeFactory");
  const bribeFactoryContract = await bribeFactoryArtifact.deploy(wallet, {
    gasPrice: ethers.gasPrice,
  });
  bribeFactory = await bribeFactoryContract.deployed();
  await sleep(5000);
  console.log("BribeFactory Deployed at:", bribeFactory.address);
}

async function deployVoter() {
  console.log("Starting Voter Deployment");
  const voterArtifact = await ethers.getContractFactory("Voter");
  const voterContract = await voterArtifact.deploy(
    VTOKEN.address,
    gaugeFactory.address,
    bribeFactory.address,
    { gasPrice: ethers.gasPrice }
  );
  voter = await voterContract.deployed();
  await sleep(5000);
  console.log("Voter Deployed at:", voter.address);
}

async function deployMinter() {
  console.log("Starting Minter Deployment");
  const minterArtifact = await ethers.getContractFactory("Minter");
  const minterContract = await minterArtifact.deploy(
    voter.address,
    TOKEN.address,
    VTOKEN.address,
    OTOKEN.address,
    { gasPrice: ethers.gasPrice }
  );
  minter = await minterContract.deployed();
  await sleep(5000);
  console.log("Minter Deployed at:", minter.address);
}

async function printVotingAddresses() {
  console.log("**************************************************************");
  console.log("GaugeFactory: ", gaugeFactory.address);
  console.log("BribeFactory: ", bribeFactory.address);
  console.log("Voter: ", voter.address);
  console.log("Minter: ", minter.address);
  console.log("**************************************************************");
}

async function verifyGaugeFactory(wallet) {
  console.log("Starting GaugeFactory Verification");
  await hre.run("verify:verify", {
    address: gaugeFactory.address,
    contract: "contracts/GaugeFactory.sol:GaugeFactory",
    constructorArguments: [wallet],
  });
  console.log("GaugeFactory Verified");
}

async function verifyBribeFactory(wallet) {
  console.log("Starting BribeFactory Verification");
  await hre.run("verify:verify", {
    address: bribeFactory.address,
    contract: "contracts/BribeFactory.sol:BribeFactory",
    constructorArguments: [wallet],
  });
  console.log("BribeFactory Verified");
}

async function verifyVoter() {
  console.log("Starting Voter Verification");
  await hre.run("verify:verify", {
    address: voter.address,
    contract: "contracts/Voter.sol:Voter",
    constructorArguments: [
      VTOKEN.address,
      gaugeFactory.address,
      bribeFactory.address,
    ],
  });
  console.log("Voter Verified");
}

async function verifyMinter() {
  console.log("Starting Minter Verification");
  await hre.run("verify:verify", {
    address: minter.address,
    contract: "contracts/Minter.sol:Minter",
    constructorArguments: [
      voter.address,
      TOKEN.address,
      VTOKEN.address,
      OTOKEN.address,
    ],
  });
  console.log("Minter Verified");
}

async function deployMulticall() {
  console.log("Starting Multicall Deployment");
  const multicallArtifact = await ethers.getContractFactory("Multicall");
  const multicallContract = await multicallArtifact.deploy(
    voter.address,
    BASE_ADDRESS,
    TOKEN.address,
    OTOKEN.address,
    VTOKEN.address,
    rewarder.address,
    { gasPrice: ethers.gasPrice }
  );
  multicall = await multicallContract.deployed();
  await sleep(5000);
  console.log("Multicall Deployed at:", multicall.address);
}

async function deployTrifectaMulticall() {
  console.log("Starting TrifectaMulticall Deployment");
  const trifectaMulticallArtifact = await ethers.getContractFactory(
    "TrifectaMulticall"
  );
  const trifectaMulticallContract = await trifectaMulticallArtifact.deploy(
    voter.address,
    { gasPrice: ethers.gasPrice }
  );
  trifectaMulticall = await trifectaMulticallContract.deployed();
  await sleep(5000);
  console.log("TrifectaMulticall Deployed at:", trifectaMulticall.address);
}

async function deployController() {
  console.log("Starting Controller Deployment");
  const controllerArtifact = await ethers.getContractFactory("Controller");
  const controllerContract = await controllerArtifact.deploy(
    voter.address,
    fees.address,
    { gasPrice: ethers.gasPrice }
  );
  controller = await controllerContract.deployed();
  await sleep(5000);
  console.log("Controller Deployed at:", controller.address);
}

async function printAncillaryAddresses() {
  console.log("**************************************************************");
  console.log("Multicall: ", multicall.address);
  console.log("TrifectaMulticall: ", trifectaMulticall.address);
  console.log("Controller: ", controller.address);
  console.log("**************************************************************");
}

async function verifyMulticall() {
  console.log("Starting Multicall Verification");
  await hre.run("verify:verify", {
    address: multicall.address,
    contract: "contracts/Multicall.sol:Multicall",
    constructorArguments: [
      voter.address,
      BASE_ADDRESS,
      TOKEN.address,
      OTOKEN.address,
      VTOKEN.address,
      rewarder.address,
    ],
  });
  console.log("Multicall Verified");
}

async function verifyTrifectaMulticall() {
  console.log("Starting TrifectaMulticall Verification");
  await hre.run("verify:verify", {
    address: trifectaMulticall.address,
    contract: "contracts/TrifectaMulticall.sol:TrifectaMulticall",
    constructorArguments: [voter.address],
  });
  console.log("TrifectaMulticall Verified");
}

async function verifyController() {
  console.log("Starting Controller Verification");
  await hre.run("verify:verify", {
    address: controller.address,
    contract: "contracts/Controller.sol:Controller",
    constructorArguments: [voter.address, fees.address],
  });
  console.log("Controller Verified");
}

async function setUpSystem(wallet) {
  console.log("Starting System Set Up");

  // await OTOKEN.approve(VTOKEN.address, convert("200000", 18));
  // await VTOKEN.burnFor(BUILDER_ADDRESS, convert("200000", 18));
  // console.log("OTOKEN burned for builder");

  // amount = await OTOKEN.balanceOf(wallet);
  // await OTOKEN.transfer(MULTISIG, amount);
  // console.log("OTOKEN Allocated");

  // await sleep(5000);
  // await gaugeFactory.setVoter(voter.address);
  // await sleep(5000);
  // await bribeFactory.setVoter(voter.address);
  // await sleep(5000);
  // console.log("Factories Set Up");

  // await VTOKEN.addReward(TOKEN.address);
  // await sleep(5000);
  // await VTOKEN.addReward(OTOKEN.address);
  // await sleep(5000);
  // await VTOKEN.addReward(BASE_ADDRESS);
  // await sleep(5000);
  // console.log("VTOKEN Rewards Set Up");

  // await VTOKEN.setVoter(voter.address);
  // await sleep(5000);
  // console.log("Token-Voting Set Up");
  // await OTOKEN.setMinter(minter.address);
  // await sleep(5000);
  // console.log("Token-Voting Set Up");

  // await voter.initialize(minter.address);
  // await sleep(5000);
  // await minter.initialize();
  // await sleep(5000);
  // console.log("Minter Set Up");

  console.log("System Initialized");
}

async function transferOwnership() {
  await minter.setTeam(MULTISIG);
  await sleep(5000);
  console.log("Minter team set to MULTISIG");

  await minter.transferOwnership(MULTISIG);
  //   await minter.transferOwnership(governor.address);
  await sleep(5000);
  console.log("Minter ownership transferred to governor");

  await voter.transferOwnership(MULTISIG);
  //   await voter.transferOwnership(governor.address);
  await sleep(5000);
  console.log("Voter ownership transferred to governor");

  await VTOKEN.transferOwnership(MULTISIG);
  //   await VTOKEN.transferOwnership(governor.address);
  await sleep(5000);
  console.log("VTOKEN ownership transferred to governor");
}

async function verifyGauge(pluginAddress, gaugeAddress) {
  console.log("Starting Gauge Verification");
  await hre.run("verify:verify", {
    address: gaugeAddress,
    contract: "contracts/GaugeFactory.sol:Gauge",
    constructorArguments: [voter.address, pluginAddress],
  });
  console.log("Gauge Verified");
}

async function verifyBribe(bribeAddress) {
  console.log("Starting Bribe Verification");
  await hre.run("verify:verify", {
    address: bribeAddress,
    contract: "contracts/BribeFactory.sol:Bribe",
    constructorArguments: [voter.address],
  });
  console.log("Bribe Verified");
}

async function verifyVaultToken(vaultTokenAddress) {
  console.log("Starting VaultToken Verification");
  await hre.run("verify:verify", {
    address: vaultTokenAddress,
    contract: "contracts/Plugin.sol:VaultToken",
    constructorArguments: [
      "Beradrome Kodiak WBERA-LOCKS-V2",
      "Beradrome Kodiak WBERA-LOCKS-V2",
    ],
  });
  console.log("VaultToken Verified");
}

async function deployBerachainPluginFactory() {
  console.log("Starting BerachainPluginFactory Deployment");
  const berachainPluginFactoryArtifact = await ethers.getContractFactory(
    "BerachainPluginFactory"
  );
  const berachainPluginFactoryContract =
    await berachainPluginFactoryArtifact.deploy(voter.address, {
      gasPrice: ethers.gasPrice,
    });
  berachainPluginFactory = await berachainPluginFactoryContract.deployed();
  console.log(
    "BerachainPluginFactory Deployed at:",
    berachainPluginFactory.address
  );
}

async function verifyBerachainPluginFactory() {
  console.log("Starting BerachainPluginFactory Verification");
  await hre.run("verify:verify", {
    address: berachainPluginFactory.address,
    contract:
      "contracts/plugins/berachain/BerachainPluginFactory.sol:BerachainPluginFactory",
    constructorArguments: [voter.address],
  });
  console.log("BerachainPluginFactory Verified");
}

async function deployBerachainPlugin() {
  console.log("Starting BerachainPlugin Deployment");
  await berachainPluginFactory.createPlugin(
    BERACHAIN_TOKEN_5,
    BERACHAIN_TOKENS_5,
    BERACHAIN_SYMBOL_5,
    BERACHAIN_NAME_5,
    { gasPrice: ethers.gasPrice }
  );
  await sleep(10000);
  console.log(
    "BerachainPlugin Deployed at:",
    await berachainPluginFactory.last_plugin()
  );
}

async function verifyBerachainPlugin() {
  console.log("Starting BerachainPlugin Verification");
  await hre.run("verify:verify", {
    address: berachainPlugin.address,
    contract:
      "contracts/plugins/berachain/BerachainPluginFactory.sol:BerachainPlugin",
    constructorArguments: [
      BERACHAIN_TOKEN_0,
      voter.address,
      BERACHAIN_TOKENS_0,
      [WBERA],
      VAULT_FACTORY,
      "0xC2BaA8443cDA8EBE51a640905A8E6bc4e1f9872c",
      "Berachain",
      BERACHAIN_SYMBOL_0,
      BERACHAIN_NAME_0,
    ],
  });
  console.log("BerachainPlugin Verified");
}

async function deployInfraredPluginFactory() {
  console.log("Starting InfraredPluginFactory Deployment");
  const infraredPluginFactoryArtifact = await ethers.getContractFactory(
    "InfraredPluginFactory"
  );
  const infraredPluginFactoryContract =
    await infraredPluginFactoryArtifact.deploy(voter.address, {
      gasPrice: ethers.gasPrice,
    });
  infraredPluginFactory = await infraredPluginFactoryContract.deployed();
  console.log(
    "InfraredPluginFactory Deployed at:",
    infraredPluginFactory.address
  );
}

async function verifyInfraredPluginFactory() {
  console.log("Starting InfraredPluginFactory Verification");
  await hre.run("verify:verify", {
    address: infraredPluginFactory.address,
    contract:
      "contracts/plugins/berachain/InfraredPluginFactory.sol:InfraredPluginFactory",
    constructorArguments: [voter.address],
  });
  console.log("InfraredPluginFactory Verified");
}

async function deployInfraredPlugin() {
  console.log("Starting InfraredPlugin Deployment");
  await infraredPluginFactory.createPlugin(
    INFRARED_VAULT_18,
    INFRARED_TOKENS_18,
    INFRARED_REWARDS_18,
    INFRARED_SYMBOL_18,
    INFRARED_NAME_18,
    { gasPrice: ethers.gasPrice }
  );
  await sleep(10000);
  console.log(
    "InfraredPlugin Deployed at:",
    await infraredPluginFactory.last_plugin()
  );
}

async function verifyInfraredPlugin() {
  console.log("Starting InfraredPlugin Verification");
  await hre.run("verify:verify", {
    address: infraredPlugin.address,
    contract:
      "contracts/plugins/berachain/InfraredPluginFactory.sol:InfraredPlugin",
    constructorArguments: [
      "0x2c4a603A2aA5596287A06886862dc29d56DbC354",
      voter.address,
      INFRARED_TOKENS_0,
      INFRARED_REWARDS_0,
      VAULT_FACTORY,
      INFRARED_VAULT_0,
      "Infrared",
      INFRARED_SYMBOL_0,
      INFRARED_NAME_0,
    ],
  });
  console.log("InfraredPlugin Verified");
}

async function deployTrifectaPluginFactory() {
  console.log("Starting TrifectaPluginFactory Deployment");
  const trifectaPluginFactoryArtifact = await ethers.getContractFactory(
    "TrifectaPluginFactory"
  );
  const trifectaPluginFactoryContract =
    await trifectaPluginFactoryArtifact.deploy(voter.address, {
      gasPrice: ethers.gasPrice,
    });
  trifectaPluginFactory = await trifectaPluginFactoryContract.deployed();
  console.log(
    "TrifectaPluginFactory Deployed at:",
    trifectaPluginFactory.address
  );
}

async function verifyTrifectaPluginFactory() {
  console.log("Starting TrifectaPluginFactory Verification");
  await hre.run("verify:verify", {
    address: trifectaPluginFactory.address,
    contract:
      "contracts/plugins/berachain/TrifectaPluginFactory.sol:TrifectaPluginFactory",
    constructorArguments: [voter.address],
  });
  console.log("TrifectaPluginFactory Verified");
}

async function deployTrifectaPlugin() {
  console.log("Starting TrifectaPlugin Deployment");
  await trifectaPluginFactory.createPlugin(
    TRIFECTA_TOKEN_3,
    TRIFECTA_FARM_3,
    TRIFECTA_TOKEN0_3,
    TRIFECTA_TOKEN1_3,
    TRIFECTA_OTHER_REWARDS_3,
    TRIFECTA_SYMBOL_3,
    TRIFECTA_NAME_3
  );
  await sleep(10000);
  console.log(
    "TrifectaPlugin Deployed at:",
    await trifectaPluginFactory.last_plugin()
  );
}

async function verifyTrifectaPlugin() {
  console.log("Starting TrifectaPlugin Verification");
  await hre.run("verify:verify", {
    address: trifectaPlugin.address,
    contract:
      "contracts/plugins/berachain/TrifectaPluginFactory.sol:TrifectaPlugin",
    constructorArguments: [
      TRIFECTA_TOKEN_0,
      voter.address,
      await trifectaPlugin.getAssetTokens(),
      await trifectaPlugin.getBribeTokens(),
      VAULT_FACTORY,
      TRIFECTA_FARM_0,
      "Liquidity Trifecta",
      TRIFECTA_SYMBOL_0,
      TRIFECTA_NAME_0,
    ],
  });
}

async function deployBeraPawPluginFactory() {
  console.log("Starting BeraPawPluginFactory Deployment");
  const berapawPluginFactoryArtifact = await ethers.getContractFactory(
    "BeraPawPluginFactory"
  );
  const berapawPluginFactoryContract =
    await berapawPluginFactoryArtifact.deploy(voter.address, {
      gasPrice: ethers.gasPrice,
    });
  berapawPluginFactory = await berapawPluginFactoryContract.deployed();
  console.log(
    "BeraPawPluginFactory Deployed at:",
    berapawPluginFactory.address
  );
}

async function verifyBeraPawPluginFactory() {
  console.log("Starting BeraPawPluginFactory Verification");
  await hre.run("verify:verify", {
    address: berapawPluginFactory.address,
    contract:
      "contracts/plugins/berachain/BeraPawPluginFactory.sol:BeraPawPluginFactory",
    constructorArguments: [voter.address],
  });
  console.log("BeraPawPluginFactory Verified");
}

async function deployBeraPawPlugin() {
  console.log("Starting BeraPawPlugin Deployment");
  await berapawPluginFactory.createPlugin(
    BERAPAW_TOKEN_4,
    BERAPAW_TOKENS_4,
    BERAPAW_SYMBOL_4,
    BERAPAW_NAME_4,
    { gasPrice: ethers.gasPrice }
  );
  await sleep(10000);
  console.log(
    "BeraPawPlugin Deployed at:",
    await berapawPluginFactory.last_plugin()
  );
}

async function verifyBeraPawPlugin() {
  console.log("Starting BeraPawPlugin Verification");
  await hre.run("verify:verify", {
    address: berapawPlugin.address,
    contract:
      "contracts/plugins/berachain/BeraPawPluginFactory.sol:BeraPawPlugin",
    constructorArguments: [
      BERAPAW_TOKEN_0,
      voter.address,
      BERAPAW_TOKENS_0,
      [LBGT],
      VAULT_FACTORY,
      "0xC2BaA8443cDA8EBE51a640905A8E6bc4e1f9872c",
      "BeraPaw",
      BERAPAW_SYMBOL_0,
      BERAPAW_NAME_0,
    ],
  });
  console.log("BeraPawPlugin Verified");
}

async function deployBeradromePluginFactory() {
  console.log("Starting BeradromePluginFactory Deployment");
  const beradromePluginFactoryArtifact = await ethers.getContractFactory(
    "BeradromePluginFactory"
  );
  const beradromePluginFactoryContract =
    await beradromePluginFactoryArtifact.deploy(voter.address, {
      gasPrice: ethers.gasPrice,
    });
  beradromePluginFactory = await beradromePluginFactoryContract.deployed();
  console.log(
    "BeradromePluginFactory Deployed at:",
    beradromePluginFactory.address
  );
}

async function verifyBeradromePluginFactory() {
  console.log("Starting BeradromePluginFactory Verification");
  await hre.run("verify:verify", {
    address: beradromePluginFactory.address,
    contract:
      "contracts/plugins/berachain/BeradromePluginFactory.sol:BeradromePluginFactory",
    constructorArguments: [voter.address],
  });
  console.log("BeradromePluginFactory Verified");
}

async function deployBeradromePlugin() {
  console.log("Starting BeradromePlugin Deployment");
  await beradromePluginFactory.createPlugin(
    BERADROME_TOKEN_23,
    BERADROME_TOKENS_23,
    BERADROME_REWARDS_23,
    BERADROME_SYMBOL_23,
    BERADROME_NAME_23,
    { gasPrice: ethers.gasPrice }
  );
  await sleep(10000);
  console.log(
    "BeradromePlugin Deployed at ",
    await beradromePluginFactory.last_plugin()
  );
}

async function verifyBeradromePlugin() {
  console.log("Starting BeradromePlugin Verification");
  await hre.run("verify:verify", {
    address: beradromePlugin.address,
    contract:
      "contracts/plugins/berachain/BeradromePluginFactory.sol:BeradromePlugin",
    constructorArguments: [
      BERADROME_TOKEN_0,
      voter.address,
      BERADROME_TOKENS_0,
      BERADROME_REWARDS_0,
      VAULT_FACTORY,
      "Beradrome",
      BERADROME_SYMBOL_0,
      BERADROME_NAME_0,
    ],
  });
  console.log("BeradromePlugin Verified");
}

async function deployInfraredTrifectaPluginFactory() {
  console.log("Starting InfraredTrifectaPluginFactory Deployment");
  const infraredTrifectaPluginFactoryArtifact = await ethers.getContractFactory(
    "InfraredTrifectaPluginFactory"
  );
  const infraredTrifectaPluginFactoryContract =
    await infraredTrifectaPluginFactoryArtifact.deploy(voter.address, {
      gasPrice: ethers.gasPrice,
    });
  infraredTrifectaPluginFactory =
    await infraredTrifectaPluginFactoryContract.deployed();
  console.log(
    "InfraredTrifectaPluginFactory Deployed at:",
    infraredTrifectaPluginFactory.address
  );
}

async function verifyInfraredTrifectaPluginFactory() {
  console.log("Starting InfraredTrifectaPluginFactory Verification");
  await hre.run("verify:verify", {
    address: infraredTrifectaPluginFactory.address,
    contract:
      "contracts/plugins/berachain/InfraredTrifectaPluginFactory.sol:InfraredTrifectaPluginFactory",
    constructorArguments: [voter.address],
  });
  console.log("InfraredTrifectaPluginFactory Verified");
}

async function deployInfraredTrifectaPlugin() {
  console.log("Starting InfraredTrifectaPlugin Deployment");
  await infraredTrifectaPluginFactory.createPlugin(
    INFRARED_TRIFECTA_VAULT_11,
    INFRARED_TRIFECTA_TOKENS_11,
    INFRARED_TRIFECTA_REWARDS_11,
    INFRARED_TRIFECTA_SYMBOL_11,
    INFRARED_TRIFECTA_NAME_11,
    { gasPrice: ethers.gasPrice }
  );
  await sleep(10000);
  console.log(
    "InfraredTrifectaPlugin Deployed at:",
    await infraredTrifectaPluginFactory.last_plugin()
  );
}

async function verifyInfraredTrifectaPlugin() {
  console.log("Starting InfraredTrifectaPlugin Verification");
  await hre.run("verify:verify", {
    address: infraredTrifectaPlugin.address,
    contract:
      "contracts/plugins/berachain/InfraredTrifectaPluginFactory.sol:InfraredTrifectaPlugin",
    constructorArguments: [
      "0x98bdeede9a45c28d229285d9d6e9139e9f505391",
      voter.address,
      INFRARED_TRIFECTA_TOKENS_0,
      INFRARED_TRIFECTA_REWARDS_0,
      VAULT_FACTORY,
      INFRARED_TRIFECTA_VAULT_0,
      "Infrared Trifecta",
      INFRARED_TRIFECTA_SYMBOL_0,
      INFRARED_TRIFECTA_NAME_0,
    ],
  });
  console.log("InfraredTrifectaPlugin Verified");
}

async function deployBurrBearPluginFactory() {
  console.log("Starting BurrBearPluginFactory Deployment");
  const burrBearPluginFactoryArtifact = await ethers.getContractFactory(
    "BurrBearPluginFactory"
  );
  const burrBearPluginFactoryContract =
    await burrBearPluginFactoryArtifact.deploy(voter.address, {
      gasPrice: ethers.gasPrice,
    });
  burrBearPluginFactory = await burrBearPluginFactoryContract.deployed();
  console.log(
    "BurrBearPluginFactory Deployed at:",
    burrBearPluginFactory.address
  );
}

async function verifyBurrBearPluginFactory() {
  console.log("Starting BurrBearPluginFactory Verification");
  await hre.run("verify:verify", {
    address: burrBearPluginFactory.address,
    contract:
      "contracts/plugins/berachain/BurrBearPluginFactory.sol:BurrBearPluginFactory",
    constructorArguments: [voter.address],
  });
  console.log("BurrBearPluginFactory Verified");
}

async function deployBurrBearPlugin() {
  console.log("Starting BurrBearPlugin Deployment");
  await burrBearPluginFactory.createPlugin(
    BURRBEAR_PID_2,
    BURRBEAR_TOKENS_2,
    BURRBEAR_SYMBOL_2,
    BURRBEAR_NAME_2,
    { gasPrice: ethers.gasPrice }
  );
  await sleep(10000);
  console.log(
    "BurrBearPlugin Deployed at:",
    await burrBearPluginFactory.last_plugin()
  );
}

async function verifyBurrBearPlugin() {
  console.log("Starting BurrBearPlugin Verification");
  await hre.run("verify:verify", {
    address: burrBearPlugin.address,
    contract:
      "contracts/plugins/berachain/BurrBearPluginFactory.sol:BurrBearPlugin",
    constructorArguments: [
      "0xD10E65A5F8cA6f835F2B1832e37cF150fb955f23",
      voter.address,
      BURRBEAR_TOKENS_0,
      [WBERA],
      VAULT_FACTORY,
      BURRBEAR_PID_0,
      "BurrBear",
      BURRBEAR_SYMBOL_0,
      BURRBEAR_NAME_0,
    ],
  });
  console.log("BurrBearPlugin Verified");
}

async function deployBeradromeHelper() {
  console.log("Starting BeradromeHelper Deployment");
  const helperArtifact = await ethers.getContractFactory("BeradromeHelper");
  const helperContract = await helperArtifact.deploy({
    gasPrice: ethers.gasPrice,
  });
  helper = await helperContract.deployed();
  console.log("BeradromeHelper Deployed at:", helper.address);
}

async function verifyBeradromeHelper() {
  console.log("Starting BeradromeHelper Verification");
  await hre.run("verify:verify", {
    address: helper.address,
    contract: "contracts/BeradromeHelper.sol:BeradromeHelper",
  });
  console.log("BeradromeHelper Verified");
}

async function main() {
  const [wallet] = await ethers.getSigners();
  console.log("Using wallet: ", wallet.address);

  await getContracts();

  //===================================================================
  // 1. Deploy Token Factories
  //===================================================================

  // console.log("Starting Factory Deployment");
  // await deployOTOKENFactory();
  // await deployVTOKENFactory();
  // await deployFeesFactory();
  // await deployRewarderFactory();
  // await printFactoryAddresses();

  //===================================================================
  // 2. Deploy Token
  //===================================================================

  // console.log("Starting Token Deployment");
  // await deployTOKEN();
  // await deployGovernor();
  // await printTokenAddresses();

  //===================================================================
  // 3. Verify Token
  //===================================================================

  // console.log("Starting Token Verification");
  // await verifyTOKEN();
  // await verifyOTOKEN(wallet);
  // await verifyVTOKEN();
  // await verifyFees();
  // await verifyRewarder();
  // await verifyGovernor();
  // console.log("Token Verified");

  //===================================================================
  // 3. Deploy Voting System
  //===================================================================

  // console.log("Starting Voting Deployment");
  // await deployGaugeFactory(wallet.address);
  // await deployBribeFactory(wallet.address);
  // await deployVoter();
  // await deployMinter();
  // await printVotingAddresses();

  //===================================================================
  // 6. Verify Voting Contracts
  //===================================================================

  // console.log("Starting Voting Verification");
  // await verifyGaugeFactory(wallet.address);
  // await verifyBribeFactory(wallet.address);
  // await verifyVoter();
  // await verifyMinter();
  // console.log("Voting Contracts Verified");

  //===================================================================
  // 4. Deploy Ancillary Contracts
  //===================================================================

  // console.log("Starting Ancillary Deployment");
  // await deployMulticall();
  // await deployTrifectaMulticall();
  // await deployController();
  // await printAncillaryAddresses();

  //===================================================================
  // 7. Verify Ancillary Contracts
  //===================================================================

  // console.log("Starting Ancillary Verification");
  // await verifyMulticall();
  // await verifyTrifectaMulticall();
  // await verifyController();
  // console.log("Ancillary Contracts Verified");

  //===================================================================
  // 8. Set Up System
  //===================================================================

  // console.log("Starting System Set Up");
  // await setUpSystem(wallet.address);
  // console.log("System Set Up");

  //===================================================================
  // 9. Transfer Ownership
  //===================================================================

  // console.log("Starting Ownership Transfer");
  // await transferOwnership();
  // console.log("Ownership Transferred");

  //===================================================================
  // 9. Print Deployment
  //===================================================================

  // console.log("Beradrome Mainnet Deployment");
  // console.log();
  // await printTokenAddresses();
  // console.log();
  // await printVotingAddresses();
  // console.log();
  // await printAncillaryAddresses();
  // console.log();

  //===================================================================
  // 11. Deploy Berachain Plugin Factory
  //===================================================================

  // console.log("Starting StationPlugin Deployment");
  // await deployBerachainPluginFactory();
  // await verifyBerachainPluginFactory();
  // console.log("BerachainPlugin Deployed and Verified");

  //===================================================================
  // 12. Deploy Berachain Plugin
  //===================================================================

  // console.log("Starting BerachainPlugin Deployment");
  // await deployBerachainPlugin();
  // await verifyBerachainPlugin();
  // console.log("BerachainPlugin Deployed and Verified");

  //===================================================================
  // 13. Deploy Infrared Plugin Factory
  //===================================================================

  // console.log("Starting InfraredPluginFactory Deployment");
  // await deployInfraredPluginFactory();
  // await verifyInfraredPluginFactory();
  // console.log("InfraredPluginFactory Deployed and Verified");

  //===================================================================
  // 14. Deploy Infrared Plugin
  //===================================================================

  // console.log("Starting InfraredPlugin Deployment");
  // await deployInfraredPlugin();
  // await verifyInfraredPlugin();
  // console.log("InfraredPlugin Deployed and Verified");

  //===================================================================
  // 19. Deploy BeraPaw Plugin Factory
  //===================================================================

  // console.log("Starting BeraPawPluginFactory Deployment");
  // await deployBeraPawPluginFactory();
  // await verifyBeraPawPluginFactory();
  // console.log("BeraPawPluginFactory Deployed and Verified");

  //===================================================================
  // 20. Deploy BeraPaw Plugin
  //===================================================================

  // console.log("Starting BeraPawPlugin Deployment");
  // await deployBeraPawPlugin();
  // await verifyBeraPawPlugin();
  // console.log("BeraPawPlugin Deployed and Verified");

  //===================================================================
  // 21. Deploy BurrBear Plugin Factory
  //===================================================================

  // console.log("Starting BurrBearPluginFactory Deployment");
  // await deployBurrBearPluginFactory();
  // await verifyBurrBearPluginFactory();
  // console.log("BurrBearPluginFactory Deployed and Verified");

  //===================================================================
  // 22. Deploy BurrBear Plugin
  //===================================================================

  // console.log("Starting BurrBearPlugin Deployment");
  // await deployBurrBearPlugin();
  // await verifyBurrBearPlugin();
  // console.log("BurrBearPlugin Deployed and Verified");

  //===================================================================
  // 17. Deploy Trifecta Plugin Factory
  //===================================================================

  // console.log("Starting TrifectaPluginFactory Deployment");
  // await deployTrifectaPluginFactory();
  // await verifyTrifectaPluginFactory();
  // console.log("TrifectaPluginFactory Deployed and Verified");

  //===================================================================
  // 18. Deploy Trifecta Plugin
  //===================================================================

  // console.log("Starting TrifectaPlugin Deployment");
  // await deployTrifectaPlugin();
  // await verifyTrifectaPlugin();
  // console.log("TrifectaPlugin Deployed and Verified");

  //===================================================================
  // 13. Deploy Beradrome Plugin Factory
  //===================================================================

  // console.log("Starting Beradrome Plugin Factory Deployment");
  // await deployBeradromePluginFactory();
  // await verifyBeradromePluginFactory();
  // console.log("Beradrome Plugin Factory Deployed and Verified");

  //===================================================================
  // 13. Deploy Beradrome Plugin
  //===================================================================

  // console.log("Starting Beradrome Plugin Deployment");
  // await deployBeradromePlugin();
  // await verifyBeradromePlugin();
  // console.log("Beradrome Plugin Deployed and Verified");

  //===================================================================
  // 14. Deploy Infrared Trifecta Plugin Factory
  //===================================================================

  // console.log("Starting Infrared Trifecta Plugin Factory Deployment");
  // await deployInfraredTrifectaPluginFactory();
  // await verifyInfraredTrifectaPluginFactory();
  // console.log("Infrared Trifecta Plugin Factory Deployed and Verified");

  //===================================================================
  // 15. Deploy Infrared Trifecta Plugin
  //===================================================================

  // console.log("Starting Infrared Trifecta Plugin Deployment");
  // await deployInfraredTrifectaPlugin();
  // await verifyInfraredTrifectaPlugin();
  // console.log("Infrared Trifecta Plugin Deployed and Verified");

  //===================================================================
  // 13. Add Gauge Rewards
  //===================================================================

  // await voter.connect(wallet).addGaugeReward(
  //   await voter.gauges(TRIFECTA_PLUGIN_0),
  //   KDK // KDK
  // ); // KDK added to Trifecta YEET-WBERA Island Gauge
  // console.log("- KDK added as gauge reward");

  // await voter.connect(wallet).addGaugeReward(
  //   await voter.gauges(TRIFECTA_PLUGIN_0),
  //   XKDK // xKDK
  // ); // xKDK added to Trifecta YEET-WBERA Island Gauge
  // console.log("- xKDK added as gauge rewards");

  //===================================================================
  // 13. Print Deployment
  //===================================================================

  // console.log("Beradrome Mainnet Deployment");
  // console.log();
  // console.log("voter: ", await voter.address);
  // console.log("gaugeFactory: ", await gaugeFactory.address);
  // console.log("bribeFactory: ", await bribeFactory.address);
  // console.log();
  // console.log("multicall: ", await multicall.address);
  // console.log("trifectaMulticall: ", await trifectaMulticall.address);
  // console.log("controller: ", await controller.address);
  // console.log();
  // console.log("StationPluginFactory: ", await stationPluginFactory.address);
  // console.log("InfraredPluginFactory: ", await infraredPluginFactory.address);
  // console.log("BeraPawPluginFactory: ", await berapawPluginFactory.address);
  // console.log("TrifectaPluginFactory: ", await trifectaPluginFactory.address);
  // console.log();
  // console.log("Reward Vault: ", await VTOKEN.rewardVault());
  // console.log("Vault Token: ", await VTOKEN.vaultToken());

  //===================================================================
  // 13. Print Plugins
  //===================================================================

  // let plugins = [
  // BERADROME_PLUGIN_0,
  // BERADROME_PLUGIN_1,
  // BERACHAIN_PLUGIN_0,
  // BERACHAIN_PLUGIN_1,
  // BERACHAIN_PLUGIN_2,
  // BERACHAIN_PLUGIN_3,
  // BERACHAIN_PLUGIN_4,
  // INFRARED_PLUGIN_0,
  // INFRARED_PLUGIN_1,
  // INFRARED_PLUGIN_2,
  // INFRARED_PLUGIN_3,
  // INFRARED_PLUGIN_4,
  // INFRARED_PLUGIN_5,
  // TRIFECTA_PLUGIN_0,
  // TRIFECTA_PLUGIN_1,
  // INFRARED_TRIFECTA_PLUGIN_0,
  // BULLAS_PLUGIN,
  // BERAPAW_PLUGIN_0,
  // BERAPAW_PLUGIN_1,
  // BERAPAW_PLUGIN_2,
  // BERAPAW_PLUGIN_3,
  // BERAPAW_PLUGIN_4,
  // ];

  // for (let i = 0; i < plugins.length; i++) {
  //   let plugin = await controller.getPlugin(plugins[i]);

  //   console.log("Protocol: ", plugin.protocol);
  //   console.log("Name: ", plugin.name);
  //   console.log("Token: ", plugin.token);
  //   console.log("Plugin: ", plugin.plugin);
  //   console.log("Gauge: ", plugin.gauge);
  //   console.log("Bribe: ", plugin.bribe);
  //   console.log("Vault Token: ", plugin.vaultToken);
  //   console.log("Reward Vault: ", plugin.rewardVault);
  //   console.log();
  // }

  // await verifyGauge(
  //   BERACHAIN_PLUGIN_0,
  //   "0x229FdFf961392cEBB08E93D630E7a6A5614dcC38"
  // );

  // await verifyBribe("0x5DBa62Ae28E2EfBd1f42aC372910F8Df78659Edd");

  // await verifyVaultToken("0x36FA291f4A4Ae41e4be2a979136EBd7eb97950E7");

  //===================================================================
  // 13. Distro
  //===================================================================

  // console.log("Distributing Rewards");

  // await voter.distro();
  // console.log("Gauge Rewards Distributed");

  // await fees.distribute();
  // console.log("Fees Rewards Distributed");

  // await voter.distributeToBribes([
  //   BERACHAIN_PLUGIN_0,
  //   BERACHAIN_PLUGIN_1,
  //   BERACHAIN_PLUGIN_2,
  //   BERACHAIN_PLUGIN_3,
  //   BERACHAIN_PLUGIN_4,
  // ]);
  // console.log("Berachain Bribe Rewards Distributed");

  // await voter.distributeToBribes([
  //   INFRARED_PLUGIN_0,
  //   INFRARED_PLUGIN_1,
  //   INFRARED_PLUGIN_2,
  //   INFRARED_PLUGIN_3,
  //   INFRARED_PLUGIN_4,
  //   INFRARED_PLUGIN_5,
  //   INFRARED_PLUGIN_6,
  //   INFRARED_PLUGIN_7,
  //   INFRARED_PLUGIN_8,
  //   INFRARED_PLUGIN_9,
  //   INFRARED_PLUGIN_10,
  //   INFRARED_PLUGIN_11,
  //   INFRARED_PLUGIN_12,
  //   INFRARED_PLUGIN_13,
  //   INFRARED_PLUGIN_14,
  //   INFRARED_PLUGIN_15,
  //   INFRARED_PLUGIN_16,
  //   INFRARED_PLUGIN_17,
  //   INFRARED_PLUGIN_18,
  // ]);
  // console.log("Infrared Bribe Rewards Distributed");

  // await voter.distributeToBribes([
  //   BERAPAW_PLUGIN_0,
  //   BERAPAW_PLUGIN_1,
  //   BERAPAW_PLUGIN_2,
  //   BERAPAW_PLUGIN_3,
  //   BERAPAW_PLUGIN_4,
  // ]);
  // console.log("BeraPaw Bribe Rewards Distributed");

  // await voter.distributeToBribes([
  //   BURRBEAR_PLUGIN_0,
  //   BURRBEAR_PLUGIN_1,
  //   BURRBEAR_PLUGIN_2,
  // ]);
  // console.log("BurrBear Bribe Rewards Distributed");

  // await voter.distributeToBribes([
  //   TRIFECTA_PLUGIN_0,
  //   TRIFECTA_PLUGIN_1,
  //   TRIFECTA_PLUGIN_2,
  // ]);
  // console.log("Liquidity Trifecta Bribe Rewards Distributed");

  // await voter.distributeToBribes([
  //   INFRARED_TRIFECTA_PLUGIN_0,
  //   INFRARED_TRIFECTA_PLUGIN_1,
  //   INFRARED_TRIFECTA_PLUGIN_2,
  //   INFRARED_TRIFECTA_PLUGIN_3,
  //   INFRARED_TRIFECTA_PLUGIN_4,
  //   INFRARED_TRIFECTA_PLUGIN_5,
  //   INFRARED_TRIFECTA_PLUGIN_6,
  //   INFRARED_TRIFECTA_PLUGIN_7,
  //   INFRARED_TRIFECTA_PLUGIN_8,
  //   INFRARED_TRIFECTA_PLUGIN_9,
  //   INFRARED_TRIFECTA_PLUGIN_10,
  // ]);
  // console.log("Infrared Trifecta Bribe Rewards Distributed");

  // await voter.distributeToBribes([BULLAS_PLUGIN]);
  // console.log("Game Bribe Rewards Distributed");

  //===================================================================
  // 14. Remove Plugin
  //===================================================================

  // console.log("Removing Plugin from Voter"); // Remove BULL ISH plugin
  // await voter
  //   .connect(wallet)
  //   .killGauge("0x1a173326c5859CF5A67f6aEB83a9954EfCdBeC3d");
  // console.log("Plugin removed from Voter");

  //===================================================================
  // 13. Add Bribe Rewards
  //===================================================================

  //   await voter
  //     .connect(wallet)
  //     .addBribeReward("0x91316cde390F239CbE039Ab39CbBfED0B86e6742", YEET);
  //   console.log("YEET added as bribe reward");

  // let data = await multicall.bondingCurveData(
  //   "0x34D023ACa5A227789B45A62D377b5B18A680BE01"
  // );
  // console.log(data);

  //===================================================================
  // 14. Deploy Beradrome Helper
  //===================================================================

  // await deployBeradromeHelper();
  // await verifyBeradromeHelper();

  // let plugins = [
  //   BERADROME_PLUGIN_0,
  //   BERADROME_PLUGIN_1,
  //   BERADROME_PLUGIN_2,
  //   BERADROME_PLUGIN_3,
  //   BERADROME_PLUGIN_4,
  //   BERADROME_PLUGIN_5,
  //   BERADROME_PLUGIN_6,
  //   BERADROME_PLUGIN_7,
  //   BERADROME_PLUGIN_8,
  //   BERADROME_PLUGIN_9,
  //   BERADROME_PLUGIN_10,
  //   BERADROME_PLUGIN_11,
  //   BERADROME_PLUGIN_12,
  //   BERADROME_PLUGIN_13,
  //   BERADROME_PLUGIN_14,
  //   BERADROME_PLUGIN_15,
  //   BERADROME_PLUGIN_16,
  //   BERADROME_PLUGIN_17,
  //   BERADROME_PLUGIN_18,
  //   BERADROME_PLUGIN_19,
  //   BERADROME_PLUGIN_20,
  //   BERADROME_PLUGIN_21,
  //   BERADROME_PLUGIN_22,
  //   BERADROME_PLUGIN_23,
  //   BERADROME_PLUGIN_24,
  //   BERADROME_PLUGIN_25,
  //   BERADROME_PLUGIN_26,
  //   BERADROME_PLUGIN_27,
  //   BERADROME_PLUGIN_28,
  //   BERACHAIN_PLUGIN_0,
  //   BERACHAIN_PLUGIN_1,
  //   BERACHAIN_PLUGIN_2,
  //   BERACHAIN_PLUGIN_3,
  //   BERACHAIN_PLUGIN_4,
  //   BERACHAIN_PLUGIN_5,
  //   INFRARED_PLUGIN_0,
  //   INFRARED_PLUGIN_1,
  //   INFRARED_PLUGIN_2,
  //   INFRARED_PLUGIN_3,
  //   INFRARED_PLUGIN_4,
  //   INFRARED_PLUGIN_5,
  //   INFRARED_PLUGIN_6,
  //   INFRARED_PLUGIN_7,
  //   INFRARED_PLUGIN_8,
  //   INFRARED_PLUGIN_9,
  //   INFRARED_PLUGIN_10,
  //   INFRARED_PLUGIN_11,
  //   INFRARED_PLUGIN_12,
  //   INFRARED_PLUGIN_13,
  //   INFRARED_PLUGIN_14,
  //   INFRARED_PLUGIN_15,
  //   INFRARED_PLUGIN_16,
  //   INFRARED_PLUGIN_17,
  //   INFRARED_PLUGIN_18,
  //   BERADROME_PLUGIN_19,
  //   TRIFECTA_PLUGIN_0,
  //   TRIFECTA_PLUGIN_1,
  //   TRIFECTA_PLUGIN_2,
  //   TRIFECTA_PLUGIN_3,
  //   INFRARED_TRIFECTA_PLUGIN_0,
  //   INFRARED_TRIFECTA_PLUGIN_1,
  //   INFRARED_TRIFECTA_PLUGIN_2,
  //   INFRARED_TRIFECTA_PLUGIN_3,
  //   INFRARED_TRIFECTA_PLUGIN_4,
  //   INFRARED_TRIFECTA_PLUGIN_5,
  //   INFRARED_TRIFECTA_PLUGIN_6,
  //   INFRARED_TRIFECTA_PLUGIN_7,
  //   INFRARED_TRIFECTA_PLUGIN_8,
  //   INFRARED_TRIFECTA_PLUGIN_9,
  //   INFRARED_TRIFECTA_PLUGIN_10,
  //   BERAPAW_PLUGIN_0,
  //   BERAPAW_PLUGIN_1,
  //   BERAPAW_PLUGIN_2,
  //   BERAPAW_PLUGIN_3,
  //   BERAPAW_PLUGIN_4,
  //   BURRBEAR_PLUGIN_0,
  //   BURRBEAR_PLUGIN_1,
  //   BURRBEAR_PLUGIN_2,
  // ];

  // for (let i = 0; i < plugins.length; i++) {
  //   let res = await controller.connect(wallet).getPlugin(plugins[i]);
  //   console.log("Plugin: ", plugins[i]);
  //   console.log("Underlying Token: ", res.token);
  //   console.log("Vault Token: ", res.vaultToken);
  //   await helper.connect(wallet).setToken(res.vaultToken, res.token);
  //   await sleep(5000);
  //   console.log("Token Set");
  //   console.log();
  // }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
